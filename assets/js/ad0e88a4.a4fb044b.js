"use strict";(self.webpackChunkwhg_training_resources=self.webpackChunkwhg_training_resources||[]).push([[3640],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>p});var n=a(7294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},d=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),h=c(a),p=o,m=h["".concat(l,".").concat(p)]||h[p]||u[p]||i;return a?n.createElement(m,r(r({ref:t},d),{},{components:a})):n.createElement(m,r({ref:t},d))}));function p(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=a.length,r=new Array(i);r[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,r[1]=s;for(var c=2;c<i;c++)r[c]=a[c];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},3892:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var n=a(7462),o=(a(7294),a(3905));const i={sidebar_position:2},r="Using R to load and manipulate data",s={unversionedId:"programming/introduction_to_R/R_basic_features_practical",id:"programming/introduction_to_R/R_basic_features_practical",title:"Using R to load and manipulate data",description:"Tutors: Helen Lockstone and Ben Wright Bioinformatics Core Wellcome",source:"@site/docs/programming/introduction_to_R/R_basic_features_practical.md",sourceDirName:"programming/introduction_to_R",slug:"/programming/introduction_to_R/R_basic_features_practical",permalink:"/whg-training-resources/programming/introduction_to_R/R_basic_features_practical",draft:!1,editUrl:"https://github.com/whg-training/whg-training-resources/edit/main/docs/programming/introduction_to_R/R_basic_features_practical.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"R: Introduction to Basic Features",permalink:"/whg-training-resources/programming/introduction_to_R/R_introduction_to_basic_features"},next:{title:"Introduction to R",permalink:"/whg-training-resources/programming/introduction_to_R/R_introduction_to_basic_features_slides"}},l={},c=[{value:"Practical Tutorial",id:"practical-tutorial",level:2},{value:"Setup",id:"setup",level:3},{value:"Helpful Tips",id:"helpful-tips",level:3},{value:"Reading in data from a file",id:"reading-in-data-from-a-file",level:2},{value:"Two-dimensional data structures",id:"two-dimensional-data-structures",level:2},{value:"Accessing Data",id:"accessing-data",level:2},{value:"Analysing Data",id:"analysing-data",level:2},{value:"Plotting Data",id:"plotting-data",level:2},{value:"Data Handling",id:"data-handling",level:2},{value:"Further Resources and Useful Information",id:"further-resources-and-useful-information",level:2},{value:"Getting Help",id:"getting-help",level:2},{value:"Installing Packages",id:"installing-packages",level:2},{value:"Bioconductor",id:"bioconductor",level:2}],d={toc:c};function u(e){let{components:t,...a}=e;return(0,o.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"using-r-to-load-and-manipulate-data"},"Using R to load and manipulate data"),(0,o.kt)("p",null,"Tutors: Helen Lockstone and Ben Wright Bioinformatics Core Wellcome\nCentre for Human Genetics University of Oxford"),(0,o.kt)("h2",{id:"practical-tutorial"},"Practical Tutorial"),(0,o.kt)("p",null,"Earlier we introduced the R software environment, some key features of\nthe R programming language and how to start using it. We will now do\nsome practical exercises working with example data to perform typical\ntasks. First, some important acknowledgements:"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"The tutorial that follows is in part adapted from the ",(0,o.kt)("a",{parentName:"em",href:"https://software-carpentry.org/lessons/"},"Software\nCarpentry Foundation"),"\nProgramming with R, specifically the Analysing Patient Data\n",(0,o.kt)("a",{parentName:"em",href:"http://swcarpentry.github.io/r-novice-inflammation/01-starting-with-data/index.html"},"tutorial"),".\nThe Software Carpentry material is available for re-use under a\n",(0,o.kt)("a",{parentName:"em",href:"https://creativecommons.org/licenses/by/4.0/"},"Creative Commons License"),"\nand I am grateful to the original authors.")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"This document and a variety of extensions to the tutorial material were\nwritten and developed by Helen Lockstone, with contributions from Ben\nWright. All the material for today's course is available\n",(0,o.kt)("a",{parentName:"em",href:"https://www.well.ox.ac.uk/training/R_Basic_Features"},"here"))),(0,o.kt)("p",null,"You can open a copy of this tutorial guide on the machine you are using\nto copy and paste any particularly long commands. Generally, manually\ntype in the shorter commands to get used to the R environment and\nstructure of commands \u2013 most are very short. Commands are shown within\nlight-grey boxes; remember that lines starting with a ","#"," are comments\nand do not need to be run."),(0,o.kt)("h3",{id:"setup"},"Setup"),(0,o.kt)("p",null,"We set up our R session for this practical before the break. You can\ncheck the current working directory with the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"getwd()\n")),(0,o.kt)("p",null,'The output (directory path) should match the location you are working in\ntoday, and this folder should also contain the files named\n"inflammation',"_",'data.csv" and "sample.csv".'),(0,o.kt)("p",null,"If this is the case, you should have everything you need to run this\ntutorial. If not, please let us know and we will get you started."),(0,o.kt)("p",null,"If you see an error message at any point, first check the command\nmatches that in the tutorial exactly and that you haven't accidentally\nmissed an earlier command out. Pay particular attention to lower/upper\ncase letters, underscores, dashes or dots in function or object names,\nand that brackets and quotes are correctly paired. If you can't spot the\nproblem or have a question at any point, please don't hesitate to ask."),(0,o.kt)("h3",{id:"helpful-tips"},"Helpful Tips"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Enter your commands in the top-left panel of RStudio (a text editor)\nas this means they can be saved to keep a record of what you have\ndone. To run a command written in this panel, make sure the cursor\nis located somewhere in the line of code and click the Run icon with\nthe green arrow. The command is automatically copied into the lower\nconsole panel and executed by R.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"To save your work, click on the disk icon in the same toolbar as the\n'run' button. Giving a filename with a .R extension, such as\n'R","_","course","_","code.R' saves it as an R script file - this can be\nopened like any text file but the .R extension is useful to identify\nyour files that contain scripts. This is the usually the easiest way\nto work; if you need to close your session and return to it another\ntime, it is easy to run the code again. If it were appropriate, all\nof the code stored in a script can be executed in R from start to\nfinish with the command:"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'source("script_name.R")\n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The ","#"," symbol is the comment character in R \u2013 lines in a script\nstarting with a ","#"," (or more commonly ","#","#) can include comments about\nwhat the code is doing. It is strongly recommended to comment your\ncode as much as possible because it will help others understand what\nit is doing, including yourself if you revisit it sometime after\noriginally working on it. A ","#"," can also be used after a command to\nnote any result or information relating to that command \u2013 everything\nafter the ","#"," will be ignored by R but serve as useful information to\nthe programmer. You can also use long lines of ","#"," symbols to break\nyour code into sections.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In the console panel, you can use the up/down arrow keys to scroll\nthrough previous commands to re-run or edit them easily if needed.\nRStudio also has features to help auto-complete names of functions\nand objects, and pairing brackets and quotes."))),(0,o.kt)("h2",{id:"reading-in-data-from-a-file"},"Reading in data from a file"),(0,o.kt)("p",null,"The first thing we need to do is load or read in the data from our files\nso it is accessible in the current R session. There are a few possible\nways to do this but we will use the function ",(0,o.kt)("strong",{parentName:"p"},"read.csv")," because our\nfiles are saved in 'comma-separated values' or csv format. To find out\ndetails of how to use this function you can search RStudio's Help menu\n(bottom right panel) or type:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"help(read.csv)\n")),(0,o.kt)("p",null,'The help page shows us the arguments for this function and their default\nvalues where applicable. For example, we see sep=",", which means the\nfields in a row will be separated on commas, and header=TRUE, which\nmeans it is expecting the first row of the file to contain names for\neach column. The first file we will work with is the one named\n\'inflammation',"_","data.csv'. If we inspect this file in Excel or a text\neditor (by opening it directly from its location on your computer) we\nsee there are no column names, just a large set of numerical values.\nTherefore, we need to explicitly include the header argument in our\ncommand, changing it to FALSE to over-ride the default behaviour of the\nfunction. This is an example of how arguments modify a function's\nprecise behaviour, rather than requiring two separate functions to exist\nfor files with/without header rows."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'inf.data <- read.csv("inflammation_data.csv", header=FALSE)\n')),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Note: if you see an error message similar to 'No such file or\ndirectory' when trying to read in a file, it is likely that either (i)\nthe file is not located in the current working directory; (ii) there is\none (or more) typos in the filename.")),(0,o.kt)("p",null,"It is worth breaking this command apart to refresh on some of the\nterminology used this morning, as it can be hard at first to\ndifferentiate object names (decided by us) from R functions (pre-defined\nin the language) when looking at R code or commands."),(0,o.kt)("p",null,"We have given a name for a new object, ",(0,o.kt)("strong",{parentName:"p"},"inf.data"),", in which to store\nthe contents of the file 'inflammation","_","data.csv'. Our object name is\ndescriptive without being too long, shortening 'inflammation' to 'inf'\nfor our convenience. We are using the in-built R function ",(0,o.kt)("strong",{parentName:"p"},"read.csv"),",\nand provide two arguments:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"the name of the file to read in"),(0,o.kt)("li",{parentName:"ul"},"header=FALSE, indicating to R that our file does not have a header\nrow")),(0,o.kt)("p",null,"There are many other arguments to the ",(0,o.kt)("strong",{parentName:"p"},"read.csv")," function to further\nrefine its behaviour but these are either optional or the default\nsettings are fine for most situations. By running this command, R\ncreates the object ",(0,o.kt)("strong",{parentName:"p"},"inf.data")," and information about it appears in the\ntop-right panel of RStudio. It is detailed as 60 obs. (observations) of\n40 variables and if you hover the mouse pointer over the name,\n",(0,o.kt)("strong",{parentName:"p"},"inf.data"),", it indicates that the object is a data frame. Finally by\nclicking the spreadsheet icon to the righthand side, the contents of the\nobject are loaded in the top-left panel in a new window, titled by the\nname of object. This shows we have successfully loaded the data. The\ncolumns have been automatically named by R as V1 through to V40, as\ncolumn names have to start with a letter. The rows are simply numbered -\nthe only restriction to row names is that they must be unique."),(0,o.kt)("p",null,"What do you think will happen if you run the command above without\nincluding the header argument? Try it by saving the contents into a new\nobject called ",(0,o.kt)("strong",{parentName:"p"},"test")," and compare this to ",(0,o.kt)("strong",{parentName:"p"},"inf.data"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'test <- read.csv("inflammation_data.csv") \n')),(0,o.kt)("p",null,"Another object named ",(0,o.kt)("strong",{parentName:"p"},"test")," now appears. We can use the ",(0,o.kt)("strong",{parentName:"p"},"head"),"\ncommand to inspect the first 6 rows of each object. For display\npurposes, we'll also only include the first 6 columns:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"head(test [, 1:6])\nhead(inf.data[ , 1:6])\n")),(0,o.kt)("p",null,"Discuss with a neighbour what you observe."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"This is a good example of how easily something unwanted can happen in R\nand the importance of checking your objects contain what you intend them\nto. Any mistakes can simply be corrected by re-running the command e.g.\nwith the appropriate header argument, and overwriting any previous\nversion of the object.")),(0,o.kt)("h2",{id:"two-dimensional-data-structures"},"Two-dimensional data structures"),(0,o.kt)("p",null,"Our original file contained rows and columns of data, and R has suitable\n2-dimensional data structures to store such data: matrices and\ndataframes. These can both be thought of as tables of data, analogous to\nan Excel spreadsheet. Matrices require all columns to be of the same\ntype, while data frames can have columns of different data types. Given\nthat experimental data is often a mixture of numeric values (e.g.\nmeasurements) and associated descriptive information, data frames are a\nvery commonly used data structure in R."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"NB while it is possible to hold mixed data types in a matrix object as\nwell, R will use its internal hierarchy of data types to choose one that\nis applicable to all columns \u2013 often this means numerical columns get\nconverted to character strings, and certain functions may not perform as\nexpected if this is not noticed, or produce an error message.")),(0,o.kt)("p",null,"In this case, a data frame object has been created:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"class(inf.data)\n")),(0,o.kt)("p",null,"We can check how each column of data has been treated by R e.g. for the\nfirst column:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"class(inf.data[,1])\n")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"In fact, as all the columns contain data of the same type, R could\nequally well store this data as a matrix object. A data frame has been\ncreated because the functions ",(0,o.kt)("strong",{parentName:"em"},"read.csv")," and ",(0,o.kt)("strong",{parentName:"em"},"read.table")," are\nspecifically designed to deal with mixed column classes and produce data\nframes by default. Another function ",(0,o.kt)("strong",{parentName:"em"},"scan")," can be used to read in\nmatrices, especially large ones.")),(0,o.kt)("p",null,"It is worth noting that some functions operate on matrix objects, and so\nconverting between classes is sometimes needed."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"inf.data <- as.matrix(inf.data)\nclass(inf.data)\n")),(0,o.kt)("p",null,"We will continue with the matrix form of this object for now, and load a\nmixed dataset later. Most operations on either kind of 2-dimensional\nobject are the same. For example, we can find the dimensions of a matrix\nor a data frame with the ",(0,o.kt)("strong",{parentName:"p"},"dim")," function."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"dim(inf.data)\n")),(0,o.kt)("p",null,"The output of ",(0,o.kt)("strong",{parentName:"p"},"dim")," is printed to the screen and shows the number of\nrows the object contains, followed by the number of columns (the\nconvention is always rows, then columns but this can be hard to remember\nat first as there is no indication)."),(0,o.kt)("p",null,"If unsure, the functions ",(0,o.kt)("strong",{parentName:"p"},"nrow")," and ",(0,o.kt)("strong",{parentName:"p"},"ncol")," will return the number of\nrows or columns respectively; these take as their argument the name of\nthe object:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"nrow(inf.data)\nncol(inf.data)\n")),(0,o.kt)("p",null,"This particular file suffers from the lack of any labels to annotate\nwhat data is recorded in the rows and columns. The Software Carpentry\ntutorial provides the following information: ",(0,o.kt)("em",{parentName:"p"},'\u201cWe are studying\ninflammation in patients who have been given a new treatment for\narthritis. Each row holds the observations for just one patient. Each\ncolumn holds the inflammation measured in a day, so we have a set of\nvalues in successive days."')),(0,o.kt)("p",null,"Our object has 60 rows and 40 columns, so we infer from the information\nabove that there are 60 patients, and 40 days."),(0,o.kt)("p",null,"Again we see a way for mistakes to easily creep into data analysis \u2013\nhere we have to rely on information given to us second-hand to know what\nis what. What if that information were wrong? Are there any checks we\ncan make ourselves to be sure patients are in rows? We are not told how\nmany patients were included so simply checking the number of rows won't\nhelp. And what if there were 50 patients and measurements taken over 50\ndays?"),(0,o.kt)("p",null,"Even with careful scrutiny it would be hard to know how the data are\npresented (patients in rows or columns) from the data alone. We could\nperhaps make some plots to help us, or we might spot the zero values in\nthe first column. Scrolling down the object display in the top-left\npanel or displaying the first column in the console confirms they are\nall zeroes, and the values in each row tend to rise across the first few\ncolumns. We may be reassured by this that the patients are indeed in the\nrows, since we might expect inflammation to rise over time, and an\nindividual recording 0 on every single day might be unlikely (though not\nimpossible)."),(0,o.kt)("p",null,"It would be prudent to add some row and column names to reduce the\nchance of making a mistake later when dealing with this data:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'rownames(inf.data) <- paste("Patient", 1:60, sep="_")\ncolnames(inf.data) <-  paste("Day", 1:40, sep="_")\n')),(0,o.kt)("p",null,"This introduces the very useful and versatile function ",(0,o.kt)("strong",{parentName:"p"},"paste"),". Note\nthat adding row and column names does not change the size of the data\nobject, but we can see them displayed by reloading the object. They are\nsimilar to the alphabetical columns and numbered rows in an Excel\nspreadsheet."),(0,o.kt)("h2",{id:"accessing-data"},"Accessing Data"),(0,o.kt)("p",null,"Earlier we looked at accessing elements of a one-dimensional vector\nobject. For matrices and dataframes, a similar approach with square\nbrackets is used:"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"object","_","name","[","rows, cols","]")),(0,o.kt)("p",null,"By specifying the rows and columns of interest, an object can be subset\nin a variety of ways to inspect or extract different parts of it."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"inf.data[1,1] # this pulls out the data value in the first row of the first column\n\ninf.data[30, 20] # any single entry can be extracted by specifying the row and column\n")),(0,o.kt)("p",null,"How might you select the data in the first 5 rows for the first 5\ncolumns? Add your command for this below."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"## If we need to select non-contiguous portions of the object, we'll need the help of the c() function:\ninf.data[c(1, 3, 5), c(10, 20)]\n\n## If you want to display all columns for selected row(s), leave blank space after the comma:\n\ninf.data[5, ] # All columns for row 5\n\n## Or blank space before the comma to select all rows for given column(s):\ninf.data[ , 1:5] # all rows, columns 1 through 5\n")),(0,o.kt)("p",null,"We added column names to our object earlier, and columns can also be\naccessed by name (in quotes):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'inf.data["Patient_1", ]\n')),(0,o.kt)("p",null,"Suppose you want to determine the maximum inflammation for patient 5\nacross days three to seven. To do this you would extract the relevant\nsubset from the data frame and calculate the maximum value. Which of the\nfollowing lines of R code gives the correct answer?"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"max(inf.data","[","5, ","]",")"),(0,o.kt)("li",{parentName:"ol"},"max(inf.data","[","3:7, 5","]",")"),(0,o.kt)("li",{parentName:"ol"},"max(inf.data","[","5, 3:7","]",")"),(0,o.kt)("li",{parentName:"ol"},"max(inf.data","[","5, 3, 7","]",")")),(0,o.kt)("h2",{id:"analysing-data"},"Analysing Data"),(0,o.kt)("p",null,"We can perform many simple analyses of the data by applying functions\nsuch as max, min, mean, or summary to our data object. We might want to\ndetermine the maximum value per patient or the average value per day.\nThe following examples illustrate how this can be done extremely\nefficiently in R, starting with an approach that is the opposite (and\ndefinitely not recommended!)."),(0,o.kt)("p",null,"Suppose we want to find the maximum inflammation score for each patient\nacross the 40 days of measurements. Let's start by calculating it for\npatient 1."),(0,o.kt)("p",null,"Extracting the data for patient 1 (i.e. the first row) is the first\nobvious step, and perhaps we decide it makes sense to store the values\nfor this patient in a new object:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"inf.patient1 <- inf.data[1, ] \n")),(0,o.kt)("p",null,"We can then calculate the maximum value for Patient 1:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"max(inf.patient1)\n")),(0,o.kt)("p",null,"Although this seems reasonable enough, there are several issues:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"We've created an additional object to store data that is simply a\nduplicate of what is already contained in our original object"),(0,o.kt)("li",{parentName:"ul"},"It doesn't scale well to do this for all 60 patients"),(0,o.kt)("li",{parentName:"ul"},"The result is output to the console and therefore hard to do\nanything further with")),(0,o.kt)("p",null,"If we did continue with this approach, there would be 60 new objects\n(all with very similar names), a high probability of having made a\ntyping mistake somewhere (perhaps overwriting one patient's data with\nanother), and a large set of results that we'd have to manually write\ndown or transfer to an Excel spreadsheet - all of which is very messy\nand prone to error."),(0,o.kt)("p",null,"We can easily dispense with the intermediate step of creating a new\nobject:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'# max inflammation for patient 1\nmax(inf.data[1, ])\n\n# or equivalently\nmax(inf.data["Patient_1", ])\n')),(0,o.kt)("p",null,"These commands are the same as extracting the data for patient 1 as we\ndid earlier, but instead of printing to the screen or storing in a new\nobject, the command is used directly as an argument to the function\n",(0,o.kt)("strong",{parentName:"p"},"max")," by enclosing in the ()."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Commands can be nested in this way to achieve multiple steps in a\nsingle line of code; too many commands in one line though can make it\nharder to work out what the code is doing, as well as increase the\nchance of the code not doing as intended \u2013 the location of brackets\nbecomes vital.")),(0,o.kt)("p",null,"We'd really like a way to this for all 60 patients without duplicating\nthe code 60 times. Loops are one option (not discussed here) but the\n",(0,o.kt)("strong",{parentName:"p"},"apply")," function is the most efficient approach:"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"apply")," allows us to repeat a function on all of the rows (MARGIN = 1)\nor columns (MARGIN = 2) of a data frame simultaneously:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"max_inf_patient <- apply(inf.data, MARGIN=1, max)\n")),(0,o.kt)("p",null,"Similarly, we could compute the average inflammation per day with a\nsingle line of code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"avg_inf_day <- apply(inf.data, MARGIN=2, mean)\n")),(0,o.kt)("p",null,"Comparing these two commands will help understand the ",(0,o.kt)("strong",{parentName:"p"},"apply"),"\nfunction, which is not intuitive but highly efficient as we have seen.\nThe arguments to apply are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The data object"),(0,o.kt)("li",{parentName:"ul"},"MARGIN, indicating whether to apply over rows (1) or columns (2)"),(0,o.kt)("li",{parentName:"ul"},"The name of (another) function to be applied")),(0,o.kt)("p",null,"We wanted to find the maximum inflammation score for each patient, so we\nlooked across the rows and used the ",(0,o.kt)("strong",{parentName:"p"},"max")," function. To modify the\ncommand to find the average inflammation per day, we switched the MARGIN\nargument to 2 for columns, and gave the final argument as ",(0,o.kt)("strong",{parentName:"p"},"mean"),"."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"While the MARGIN argument is explicitly assigned above, R is equally\nhappy to infer from the shortened command apply(inf.data, 1, max) that\nthe 1 should be assigned to the second defined argument of apply. You\ncan also write your own bespoke functions as required and use apply to\nrun them over an object.")),(0,o.kt)("p",null,"We have also solved the final issue with our initial approach by storing\nthe results in suitably-named objects for further work."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"length(max_inf_patient) \nhead(max_inf_patient)\n")),(0,o.kt)("p",null,"Another useful function is ",(0,o.kt)("strong",{parentName:"p"},"summary"),". This returns the minimum value,\nfirst quartile, median, mean, third quartile and the maximum value, all\nvery useful information to make an initial inspection of your data."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"summary(inf.data[, 1:4]) # for each of the first 4 days\n")),(0,o.kt)("h2",{id:"plotting-data"},"Plotting Data"),(0,o.kt)("p",null,"Visualising data is a vital part of statistical analysis, and R's\nplotting capabilities are a key reason for its popularity. There is a\nrelated course R: Visualisation that you can take if interested to learn\nmore. Here, we introduce ways to make a few simple plots. Let's take a\nlook at the average inflammation over time. Recall that we already\ncalculated these values above and saved them in an object named\n",(0,o.kt)("strong",{parentName:"p"},"avg","_","inf","_","day"),". Plotting the values is done with the function\n",(0,o.kt)("strong",{parentName:"p"},"plot"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'plot(avg_inf_day)\n\n## Default labels and settings are used but we can refine our plot with some additional arguments:\n\nplot(avg_inf_day, main="Inflammation Scores Over Time", xlab="Day", ylab="Average_inflammation_score") # adding title and axis labels\n\nplot(avg_inf_day, main="Inflammation Scores Over Time", xlab="Day", ylab="Average_inflammation_score", pch=4, col="red") # changing the plotting symbols and colour\n\n## Similarly, we could plot the data per patient:\nplot(max_inf_patient)\n\n## Here, we might decide to use a boxplot instead:\nboxplot(max_inf_patient, main="Maximum Inflammation Scores", ylab="Max_inf_score")\nlegend("topright", legend="n=60 patients", cex=0.8) # adding a legend\n')),(0,o.kt)("p",null,"When we are happy with our plots, they can be saved to a file."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},' pdf("Inflammation_plots.pdf", onefile=T)\nplot(avg_inf_day, main="Inflammation Scores Over Time", xlab="Day", ylab="Average_inflammation_score", pch=4, col="red")\nboxplot(max_inf_patient, main="Maximum Inflammation Scores", ylab="Max_inf_score")\nlegend("topright", legend="n=60 patients", cex=0.8)\ndev.off()\n')),(0,o.kt)("p",null,"This will be saved to the current working directory by default so if we\ncheck the folder, a new file named 'Inflammation","_","plots.pdf' should have\nbeen created. The onefile=T argument instructs R to append additional\nplots to the same file and the ",(0,o.kt)("strong",{parentName:"p"},"dev.off()")," command at the end closes\nthe file connection. You can also export plots directly to a pdf file\nfrom the RStudio plot panel."),(0,o.kt)("h2",{id:"data-handling"},"Data Handling"),(0,o.kt)("p",null,"We'll next read in data from another file to illustrate a few more\nfeatures of data frames and how to work with them in R. In this case the\nfile does contain a header row and the default arguments for read.csv\nare appropriate for this file so we only need provide the filename:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'data2 <- read.csv("sample.csv")\nhead(data2)\n')),(0,o.kt)("p",null,"This displays the first 6 rows, and we can see immediately that we have\na range of different types of data in each column. Let's see how R has\ntreated it (you can paste the following 4 lines as one block)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"for(i in 1:ncol(data2))\n{\n    print(class(data2[,i]))\n}\n")),(0,o.kt)("p",null,"Here, we've used a ",(0,o.kt)("strong",{parentName:"p"},"for")," loop to iterate over each column in the\nobject ",(0,o.kt)("strong",{parentName:"p"},"data2"),", and print to screen the class of each column. The\noutput tells us that columns 1:3 are treated as factors, column 5 as\nnumeric and the remaining columns as integer values. We haven't yet\nmentioned factors and will only briefly discuss them here but they are\nvery important for statistical analysis in R. They are one-dimensional,\nlike vectors, and are particularly useful for categorical data."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"length(data2$Group)\ndata2$Group\n")),(0,o.kt)("p",null,"Each of the 100 entries in the Group column are printed to the screen,\nand at the end is the additional information: ",(0,o.kt)("em",{parentName:"p"},"Levels: Control\nTreatment1 Treatment2")),(0,o.kt)("p",null,"These are the unique set of entries in this column, known as the levels\nof the factor. You may have come across factors before in the context of\nexperimental design or ANOVA - in this case the experiment might test\nthe effect of 2 treatments (Treatment1 and Treatment2) on blood\npressure, perhaps to see if it reduces compared to a control group.\nOther information about the patients, such as their age and gender may\nbe useful to include in the analysis, especially if they are not matched\nacross the treatment groups."),(0,o.kt)("p",null,"R will treat any columns containing character strings (text) as a factor\nby default with ",(0,o.kt)("strong",{parentName:"p"},"read.csv")," or ",(0,o.kt)("strong",{parentName:"p"},"read.table"),". We don't always want to\ndo this though, and indeed it is usually preferable to switch this\nbehaviour off, and specifically convert data we do want to treat as\nfactors later. This is because factors store data differently and so can\nsometimes behave differently to vectors. For example, here the first\ncolumn of IDs would preferably be a character vector, as could Gender\nunless we needed to include it as an additional explanatory factor in\nour analysis model."),(0,o.kt)("p",null,"The way to switch off this default behaviour is with the argument\n'stringsAsFactors' \u2013 if you check the help page for ",(0,o.kt)("strong",{parentName:"p"},"read.csv")," again,\nyou'll see it listed among the arguments, and it is TRUE by default\n(although it's not readily apparent that this is the case)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'data2 <- read.csv("sample.csv", stringsAsFactors=FALSE)\n')),(0,o.kt)("p",null,"Repeating our loop to check the class of each column, we now see that\nthe first 3 columns are character vectors rather than factors:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"for(i in 1:ncol(data2))\n{\n    print(class(data2[,i]))\n}\n")),(0,o.kt)("p",null,"We can specifically convert the Group column to a factor:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"data2$Group <- as.factor(data2$Group)\nclass(data2$Group)\n")),(0,o.kt)("p",null,"A very useful summary function is ",(0,o.kt)("strong",{parentName:"p"},"table"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"table(data2$Group)\ntable(data2$Gender)\n")),(0,o.kt)("p",null,"This alerts us to the fact that data in the Gender column has not been\nentered consistently, which we might have already spotted from viewing\nthe object in RStudio."),(0,o.kt)("p",null,"To fix this, we can make sure F and M are used throughout; this involves\ndetermining which rows contain a lowercase f for example, and\nsubstituting with F. Similarly for the lowercase case m:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'data2$Gender <- gsub("f", "F", data2$Gender)\ndata2$Gender <- gsub("m", "M", data2$Gender)\n\n## checking we have modified the data as intended\ntable(data2$Gender)\n')),(0,o.kt)("p",null,"This last section is just a brief foray into data handling and\nmanipulation in R, which enables all manner of formatting, editing,\nupdating or data cleaning tasks to be performed. These are frequently\nrequired before embarking on some analysis, and often take longer too!\nIt is the topic of the next course in the series, R: Data Handling -\nplease sign up if interested."),(0,o.kt)("p",null,"Well, we have reached the end of today's course \u2013 we hope it was useful\nfor you and good luck on your R journey! Please see below for further\nreading and information."),(0,o.kt)("h2",{id:"further-resources-and-useful-information"},"Further Resources and Useful Information"),(0,o.kt)("p",null,"We have helped collate a comprehensive ",(0,o.kt)("a",{parentName:"p",href:"https://help.it.ox.ac.uk/courses/R"},"set of R\nresources")," with IT Services (with\nparticular thanks to Dave Baker for creating the website, and\ncontributions from Samantha Curle and Andre Python), which lists courses\n(online and workshops) as well as recommended textbooks, websites etc."),(0,o.kt)("p",null,"The Software Carpentry Foundation website contains many tutorials for\nlearning a variety of programming languages, including R. There is also\na series of domain-specific Data Carpentry courses, which focus on\ncomputational skills needed to handle and analyse data - tutorials are\ncurrently available for Ecology, Genomics, Geospatial Data and Social\nSciences, with others in development."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://software-carpentry.org/lessons/"},"Software Carpentry\nlessons")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://datacarpentry.org/lessons/"},"Data Carpentry lessons"))),(0,o.kt)("p",null,"In particular, the tutorials at the following links give further details\nand examples on some of the ideas already introduced or extend to other\ntopics once you feel comfortable interacting with the R environment."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"http://swcarpentry.github.io/r-novice-inflammation/13-supp-data-structures/index.html"},"Data\nstructures")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"http://swcarpentry.github.io/r-novice-inflammation/11-supp-read-write-csv/index.html"},"Read and write csv\nfiles")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"http://swcarpentry.github.io/r-novice-inflammation/12-supp-factors/index.html"},"Factors")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"http://swcarpentry.github.io/r-novice-inflammation/10-supp-addressing-data/index.html"},"Addressing\ndata")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"http://swcarpentry.github.io/r-novice-inflammation/06-best-practices-R/index.html"},"Best\npractices")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://datacarpentry.org/R-genomics/"},"R genomics")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://datacarpentry.org/r-intro-geospatial/"},"Geospatial data"))),(0,o.kt)("h2",{id:"getting-help"},"Getting Help"),(0,o.kt)("p",null,"As you read the R help pages, you may not find them terribly helpful.\nThe R help function is most useful for refreshing your memory about\nspecific functions you have used before. Unfortunately, it is not very\nuseful for learning the language itself."),(0,o.kt)("p",null,"There are several online forums used by R programmers, novice and\nexpert, to get help and advice from their peers. Searching for your R\nproblem will often give results from one of these forums."),(0,o.kt)("p",null,"One page 'quick reference' documents: - ",(0,o.kt)("a",{parentName:"p",href:"http://www.well.ox.ac.uk/training/R_materials/r-cheat-sheet.pdf"},"R cheat\nsheet")," -\n",(0,o.kt)("a",{parentName:"p",href:"http://www.well.ox.ac.uk/training/R_materials/R_reference_card.pdf"},"R reference\ncard"),"\nFull R manual: - ",(0,o.kt)("a",{parentName:"p",href:"http://www.well.ox.ac.uk/training/R_materials/R-introduction_manual.pdf"},"R\nmanual")),(0,o.kt)("h2",{id:"installing-packages"},"Installing Packages"),(0,o.kt)("p",null,"When freshly installed, R has only its basic functions available. This\nis still a considerable number of functions and is adequate for a great\nmany tasks. R's functionality is extended by the use of packages, each\nof which is a self-contained bundle of additional functions. These are\ntypically written by people other than the main R developers, but a\ncentralised repository of these packages (CRAN) is maintained and\naccessible from within R. For example, to install the package called\n'limma', you would use:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'install.packages("limma")\n')),(0,o.kt)("p",null,"which downloads the files needed. You may be asked to choose where to\ndownload the files from, or asked to confirm that they will be installed\nto a user directory if you do not have admin permissions for your\ncomputer. Some R packages rely on other R packages. R handles all of\nthose dependencies in the background and will download and install every\nneeded package as part of installing the requested one. Installing\npackages does not make them available straight away. You need to tell R\nto make a package available in your current session using the command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"library(limma)\n")),(0,o.kt)("p",null,"You will need to do this each time you restart R. This step is required\nso you don't waste memory by loading in packages you don't need every\nsession. Note that the help() function only knows about functions that\nhave been made available using the library() command."),(0,o.kt)("h2",{id:"bioconductor"},"Bioconductor"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://www.bioconductor.org/"},"Bioconductor")," is a separate third-party\nrepository of R code, specifically geared towards bioinformatics. Many\nof the packages in Bioconductor are also available via CRAN using the\nusual package installation method. However, Bioconductor has its own\npreferred installation mechanism which gets around some of R's more\nannoying limitations with version incompatibilities. In particular, the\npackages in Bioconductor are updated more swiftly following the release\nof a new version of R. To get started with Bioconductor, use the\nfollowing command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'source("https://bioconductor.org/biocLite.R")\n')),(0,o.kt)("p",null,"This loads an R script hosted on the web that defines a new function.\nYou then use this function in a similar way to how you would use the\ninstall.packages() function:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'biocLite("limma")\n')),(0,o.kt)("p",null,"Loading Bioconductor packages this way is typically a longer process but\nmore reliable."))}u.isMDXComponent=!0}}]);