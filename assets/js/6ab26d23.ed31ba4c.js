"use strict";(self.webpackChunkwhg_training_resources=self.webpackChunkwhg_training_resources||[]).push([[679],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),h=c(n),m=o,p=h["".concat(l,".").concat(m)]||h[m]||d[m]||r;return n?a.createElement(p,i(i({ref:t},u),{},{components:n})):a.createElement(p,i({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},9656:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var a=n(7462),o=(n(7294),n(3905));const r={sidebar_position:1},i="R: Introduction to Basic Features",s={unversionedId:"programming/introduction_to_R/R_introduction_to_basic_features",id:"programming/introduction_to_R/R_introduction_to_basic_features",title:"R: Introduction to Basic Features",description:"Author: Helen Lockstone",source:"@site/docs/programming/introduction_to_R/R_introduction_to_basic_features.md",sourceDirName:"programming/introduction_to_R",slug:"/programming/introduction_to_R/R_introduction_to_basic_features",permalink:"/whg-training-resources/programming/introduction_to_R/R_introduction_to_basic_features",draft:!1,editUrl:"https://github.com/whg-training/whg-training-resources/edit/main/docs/programming/introduction_to_R/R_introduction_to_basic_features.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Introduction to R",permalink:"/whg-training-resources/programming/introduction_to_R/"},next:{title:"Using R to load and manipulate data",permalink:"/whg-training-resources/programming/introduction_to_R/R_basic_features_practical"}},l={},c=[{value:"Introduction",id:"introduction",level:2},{value:"The R environment",id:"the-r-environment",level:2},{value:"R command syntax",id:"r-command-syntax",level:2},{value:"R Objects",id:"r-objects",level:2},{value:"Vectors",id:"vectors",level:2},{value:"Accessing elements of a vector",id:"accessing-elements-of-a-vector",level:2},{value:"General Comments",id:"general-comments",level:2}],u={toc:c};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"r-introduction-to-basic-features"},"R: Introduction to Basic Features"),(0,o.kt)("p",null,"Author: Helen Lockstone"),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"This workshop will introduce you to the R environment, with the aim of\nbecoming familiar with how commands are written and structured and how\nto perform basic tasks associated with data analysis using R."),(0,o.kt)("p",null,"All material can be found\n",(0,o.kt)("a",{parentName:"p",href:"https://www.well.ox.ac.uk/training/R_Basic_Features"},"here")),(0,o.kt)("p",null,"For today's session you need a basic installation of the R software and\nthe RStudio interface. You can use the desktop machines in front of you,\nor your own laptop if you prefer."),(0,o.kt)("h2",{id:"the-r-environment"},"The R environment"),(0,o.kt)("p",null,"Open a new R session by launching RStudio. You should see the 4 panel\ndisplay briefly introduced earlier. You can run any commands shown in\nthis document by copying the R code into the top left panel of RStudio\nand clicking the icon with a green forward arrow in the toolbar. The\nline of code where the cursor is will be automatically copied into the\nbottom left panel and executed by R in realtime. You should see the R\nprompt ",">"," again when it has finished. Depending on the command, some\noutput may also be printed to the screen or it may simply return to the\nprompt (ready to receive another command). Note that something may have\nhappened 'behind the scenes' - such as creation of a new object. It is\nimportant to know what each command has done and it was as intended."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"If you see an error message, first double check that the command is\nentered exactly as shown. If you can't find the problem, please ask for\nhelp. The advantage of copying the commands into the text editor panel\nof RStudio means that you can save the file afterwards to have a record\nof what you have done and can easily re-run again in future.")),(0,o.kt)("p",null,"If a command is not valid in the way it is constructed (its syntax), R\nwill print an error message to the screen. These can sometimes be hard\nto interpret but particularly common culprits are simple typing mistakes\nor quotes and brackets, whether they are in the wrong place, missing, or\nnot in pairs (e.g. missing a closing bracket)."),(0,o.kt)("p",null,"R is a very interactive environment; commands can be entered into the\nconsole one by one, and each is interpreted and executed by R in real\ntime. R is a high-level programming language, meaning that it is fairly\nhuman-readable. We will start by entering a few simple commands and\ndiscuss what is happening."),(0,o.kt)("p",null,"You can type the R commands directly, which is useful at first to get\nused to the syntax (structure) of commands. However, you can copy/paste\nif you prefer. To do anything useful in R, we need to use objects to\nhold data or information and perform various operations on them. The\nterms object, variable and data structure can all refer generally to\nobjects created in R."),(0,o.kt)("p",null,"Although variable is a widely used programming term and would be the\npreferred term in certain situations, I will use object as a general\nterm throughout to refer to any of R's data structures. These include\nvectors, factors, matrices, dataframes and lists. We'll focus on vectors\ninitially and meet dataframes later on."),(0,o.kt)("h2",{id:"r-command-syntax"},"R command syntax"),(0,o.kt)("p",null,"The following few commands give some sense of how R stores information\nin objects and how simple manipulations of data can be performed. The ","#","\nsymbol indicates a comment or output that will be produced by running\nthe command - you only need to type the lines without ","#"," symbols at the\nstart."),(0,o.kt)("p",null,"The first command assigns the value 1 to a new object we create and name\nx."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"x <- 1 \n")),(0,o.kt)("p",null,"The assignment operator is ","<","- and running this command creates a new\nobject named x in R's memory. To inspect the contents of the new object,\nwe simply type its name x:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"## Inspect the contents of the new object \nx \n## [1] 1 \n")),(0,o.kt)("p",null,"Note that the contents of an object will be overwritten - without any\nwarning message -if later assigned a different value:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"x <- 4 \n# x now contains the value 4 \nx \n## [1] 4 \n")),(0,o.kt)("p",null,"We can also perform operations directly on the object (note the object\nitself does not change):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"x * 2 \n## [1] 8 \n# x still contains the value 4 \nx \n## [1] 4 \n\n## unless we were to re-assign the output back to the same object: \nx <- x * 2 \n# x now contains the value 8 \nx  \n## [1] 8 \n")),(0,o.kt)("p",null,"R is case sensitive so x and X are different:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"X  \n")),(0,o.kt)("p",null,'Trying to run this command will produce an error message: Error: object\n"X" not found Object names are chosen by the programmer \u2013 informative\nnames are helpful for several reasons. You can use capitalization, ',"_"," or\n. to separate parts of an object name but they cannot contain spaces,\nnor start with a number. To avoid confusion or potential issues, it is\nalso best not to give them the same name as an R function, which have\ntheir own defined names. An object named ",(0,o.kt)("strong",{parentName:"p"},"raw","_","data"),", ",(0,o.kt)("strong",{parentName:"p"},"raw.data"),",\n",(0,o.kt)("strong",{parentName:"p"},"rawData")," (or even ",(0,o.kt)("strong",{parentName:"p"},"d.raw")," for minimal typing!) is fine, but trying\nto assign a value to a variable named raw data will give an error\nbecause R cannot parse it correctly."),(0,o.kt)("p",null,"Elsewhere R ignores whitespace so the following commands are equivalent:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"x<-4+3 \nx <- 4 + 3 \n")),(0,o.kt)("p",null,"Now we will assign a set of numbers to our variable x, which R will\nstore as a vector"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"x <- c(1,2,3,4,5)  \nx \n## [1] 1 2 3 4 5 \n")),(0,o.kt)("p",null,"If we forget the closing bracket before pressing enter, a + sign\nindicates the command is incomplete:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"x <- c(1,2,3,4,5 \n+ \n) \n")),(0,o.kt)("p",null,"If we can't simply continue our command, use Esc or control-C to return\nto the prompt and start again. There is also a useful command recall\noption \u2013 you can use the up/down arrows to scroll through previously\nentered commands, which can be edited or re-run to save typing again."),(0,o.kt)("p",null,"Rstudio and some text editor programs highlight different parts of the\nsyntax in different colours and automatically close brackets and\nquotation marks to help eliminate typing mistakes."),(0,o.kt)("h2",{id:"r-objects"},"R Objects"),(0,o.kt)("p",null,"Objects can be created in many different ways and hold different kinds\nof information. Unlike other programming languages, there is no need to\ninitialise a variable or object in R (define it before first use) \u2013 it\ncan simply be created and used directly. R also automatically decides\nwhich of its data structures and types are most appropriate for the data\ngiven, rather than being explicitly specified by the programmer."),(0,o.kt)("p",null,"We'll work through some examples and look at ways to access or\nmanipulate the data contained within an object. Be aware that the type\n(class) of an object and data it contains (numeric, character etc) can\naffect how it is treated by R."),(0,o.kt)("p",null,"There are many shortcuts in R to avoid tedious or error-prone steps.\nWhen we created our small example vector containing the numbers 1 to 5,\nwe issued this command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"x <- c(1,2,3,4,5) # the c function tells R to concatenate these 5 numbers \n## equivalently we could use this command \nx <- 1:5 # handy if we needed a much longer vector such as 1 to 100, or 1 to \n100000\n")),(0,o.kt)("p",null,"We can also put together non-consecutive strings of numbers or a mixture"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"x2 <- c(1,3,5,7,9)  \nx3 <- c(1:5, 7, 9, 10:15)\n")),(0,o.kt)("p",null,"If we need to create a sequence of numbers, the function seq is very\nuseful."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"seq1 <- seq(from=1, to=99, by=2) \nseq2 <- seq(from=0, to=1, by=0.01)  \n")),(0,o.kt)("p",null,"Functions are defined blocks of code that perform a particular task. R\nhas many hundreds of in-built functions for common tasks, and they can\nbe used by 'calling' the function by its name. Above, we used the\nfunction seq; the function name is followed by any arguments in\nparentheses - the arguments determine exactly what the function does and\nenable it to be useful for many situations. By changing the arguments,\nwe changed the sequence of numbers that was produced. Some arguments are\nrequired and others are optional or may have default settings defined in\nthe function. Documentation about the usage of any R function is given\nin the corresponding help page:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"help(seq) \n")),(0,o.kt)("h2",{id:"vectors"},"Vectors"),(0,o.kt)("p",null,"Vectors are one-dimensional objects; in the case of the object x we\ncreated earlier, it has length 5. There is an in-built R function called\nlength that we can use to check how long any given vector object is:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"length(x) \n## [1] 5 \n## If we change what is assigned to x, the length of the vector is automatically adjusted: \nx <- 1:10 \nlength(x) \n## [1] 10\n")),(0,o.kt)("p",null,"Vectors are R's primary object type and many computations in R are\nhighly efficient because they operate on the whole vector at once,\nrather than element by element."),(0,o.kt)("p",null,"Vectors can contain numeric or character data (or both). We can create a\nnew vector, y, containing the letters 'abc':"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'y <- c("a", "b", "c") \n')),(0,o.kt)("p",null,"In Rstudio's top right panel, we see details of all the objects that\nhave been created in the current session and are available to use. Note\nthe differences between x and y. We can also see how R has automatically\ntreated them differently by checking the class of the objects directly:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'class(x) \n## [1] "integer" \nclass(y) \n## [1] "character"\n')),(0,o.kt)("p",null,"Now try running the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"y <- c(a, b, c) \n")),(0,o.kt)("p",null,"What do you think R has tried to do and why does it result in an error\nmessage?"),(0,o.kt)("h2",{id:"accessing-elements-of-a-vector"},"Accessing elements of a vector"),(0,o.kt)("p",null,"Square brackets are used to access specific elements or subsets of a\nvector, factor, matrix or dataframe. Let's create a new vector as an\nexample:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"x <- c(1:5, 10:14) \n## now extract 3rd element \nx[3] \n## or extract alternate elements \nx[c(1,3,5,7,9)] \n## or extract subset of elements \nx[3:6]\n")),(0,o.kt)("p",null,"R will decide the most appropriate way to store the data it is provided\nwith, and there are ways to convert between different object structures\nand classes if needed. To give more examples of how data is interpreted\nby R, run the following and note the results (discuss with your\nneighbour)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'x2 <- c(1:5, 6.5) \nclass(x2) \n## [1] "numeric" \nx3 <- c(1:5, 6.5, "a", "b", "c") \nclass(x3) \n## [1] "character"\n')),(0,o.kt)("p",null,"This gives some idea of R's internal rules. Because the way data is\nbeing handled by R is important for both performing computations\ncorrectly and the source of many error messages, it is useful to be\nfamiliar with the common data types. Some functions, such as computing a\nmean for example, require numeric data objects to operate on. What\nhappens when you try to find the mean of x2 and x3?"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"mean(x2) \nmean(x3) \n")),(0,o.kt)("h2",{id:"general-comments"},"General Comments"),(0,o.kt)("p",null,"The top right panel in RStudio showing existing objects and information\non their contents is invaluable. Not only does it save writing separate\ncommands to check these details, it can help you check:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"that your object has been created correctly and contains what you\nwanted it to"),(0,o.kt)("li",{parentName:"ul"},"how R will treat the object internally (when functions are applied\nto it)"),(0,o.kt)("li",{parentName:"ul"},"possible reasons for an error message"),(0,o.kt)("li",{parentName:"ul"},"spot any changes that happen to your object (intentionally or\notherwise)"),(0,o.kt)("li",{parentName:"ul"},"that you do not have too many and/or poorly named objects that could\nlead to mistakes")),(0,o.kt)("p",null,"Sometimes you are testing things out and creating lots of objects \u2013\nthat's fine but it's always good to start a new session when running or\nchecking your final code to be sure previous objects do not affect it in\nany way. Sessions can also be cleaned up by deleting objects with the rm\ncommand."),(0,o.kt)("p",null,"There are hundreds, probably thousands, of in-built functions in R. Some\nyou will use very often and others rarely or never. There are always\nseveral ways to do the same thing in R, using closely-related functions."),(0,o.kt)("p",null,"Examples of the functions we have used so far include length, mean, and\nclass. In the case of length, the argument supplied is the name of the\nobject we wish to find the length of. We can check the length of another\nvector object simply by changing the argument."),(0,o.kt)("p",null,"The length function is only applicable to vectors (or factors) and does\nnot work on other data types such as matrices or dataframes, which are\n2-dimensional. Often, data is stored in a table format (e.g. in Excel),\nand commonly handled as a data frame in R. We will introduce these ideas\nusing practical exercises after the break."),(0,o.kt)("p",null,"An important concept before we get started is the working directory. If\nwe want to read in data from existing files or create new ones to save\nany plots or analysis results, R needs to know where to find/save them."),(0,o.kt)("p",null,"If you are working on a personal laptop, create a folder for today's\ncourse (you can name it 'R","_","workshop' or whatever you wish) somewhere in\nyour file directory."),(0,o.kt)("p",null,"We now need to set this as the working directory:"),(0,o.kt)("p",null,"From the Session menu, select 'Set working directory', and then 'Choose\ndirectory...'"),(0,o.kt)("p",null,"Navigate to the relevant directory and select OK to set it as the\nworking directory. Note that this will automatically execute a setwd\ncommand in the console."),(0,o.kt)("p",null,"You will also need to download two data files by entering the following\ncommands:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'download.file("https://www.well.ox.ac.uk/training/R_materials/\ninflammation_data.csv", "./inflammation_data.csv") \n \ndownload.file("https://www.well.ox.ac.uk/training/R_materials/\nsample.csv", "./sample.csv"\n')))}d.isMDXComponent=!0}}]);