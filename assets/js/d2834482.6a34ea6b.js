"use strict";(self.webpackChunkwhg_training_resources=self.webpackChunkwhg_training_resources||[]).push([[9174],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=p(n),g=i,h=m["".concat(s,".").concat(g)]||m[g]||d[g]||r;return n?a.createElement(h,o(o({ref:t},u),{},{components:n})):a.createElement(h,o({ref:t},u))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7541:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=n(7462),i=(n(7294),n(3905));const r={sidebar_position:5},o="Writing a useful conversion program.",l={unversionedId:"programming/programming_with_gene_annotations/Converting_gff_to_sqlite",id:"programming/programming_with_gene_annotations/Converting_gff_to_sqlite",title:"Writing a useful conversion program.",description:"Your module is already very useful! To demonstrate this, let's convert the GFF file into a different format - a",source:"@site/docs/programming/programming_with_gene_annotations/Converting_gff_to_sqlite.md",sourceDirName:"programming/programming_with_gene_annotations",slug:"/programming/programming_with_gene_annotations/Converting_gff_to_sqlite",permalink:"/whg-training-resources/programming/programming_with_gene_annotations/Converting_gff_to_sqlite",draft:!1,editUrl:"https://github.com/whg-training/whg-training-resources/edit/main/docs/programming/programming_with_gene_annotations/Converting_gff_to_sqlite.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"An aside on refactoring",permalink:"/whg-training-resources/programming/programming_with_gene_annotations/Refactoring_makes_code_better"},next:{title:"Investigating human genes",permalink:"/whg-training-resources/programming/programming_with_gene_annotations/exploring_gencode"}},s={},p=[{value:"Writing a command-line program",id:"writing-a-command-line-program",level:2},{value:"Adding command-line options",id:"adding-command-line-options",level:3},{value:"Implementing the main function",id:"implementing-the-main-function",level:3},{value:"Parsing the data",id:"parsing-the-data",level:3},{value:"Adding an analysis &#39;name&#39;",id:"adding-an-analysis-name",level:3},{value:"Outputting to sqlite",id:"outputting-to-sqlite",level:3},{value:"Adding an index",id:"adding-an-index",level:3},{value:"Closing the connection",id:"closing-the-connection",level:3},{value:"Trying it out",id:"trying-it-out",level:3},{value:"Reading results from any language",id:"reading-results-from-any-language",level:2},{value:"The command-line",id:"the-command-line",level:3},{value:"Python",id:"python",level:3},{value:"R",id:"r",level:3},{value:"Julia",id:"julia",level:3},{value:"On the web",id:"on-the-web",level:3},{value:"Finishing touches",id:"finishing-touches",level:2},{value:"Solutions",id:"solutions",level:2},{value:"Back to the task",id:"back-to-the-task",level:2}],u={toc:p};function d(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,a.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"writing-a-useful-conversion-program"},"Writing a useful conversion program."),(0,i.kt)("p",null,"Your module is already very useful! To demonstrate this, let's convert the GFF file into a different format - a\n",(0,i.kt)("a",{parentName:"p",href:"https://www.sqlite.org"},"sqlite database")," database. ",(0,i.kt)("inlineCode",{parentName:"p"},"sqlite")," is a very useful file format that works like a\nfull database, but doesn't require a server or anything like that - it's just a single file on the filesystem."),(0,i.kt)("p",null,"Unlike a flat file, it is relational, making it easy to link records together. (This is ",(0,i.kt)("a",{parentName:"p",href:"%5Bhttps://pandas.pydata.org/docs/getting_started/comparison/comparison_with_sql.html#compare-with-sql-join"},"similar to pandas\nfunctionality"),"\nbut doesn't need to load all the data into memory.)"),(0,i.kt)("p",null,"For us, sqlite will help us to selectively load bits of data we want."),(0,i.kt)("h2",{id:"writing-a-command-line-program"},"Writing a command-line program"),(0,i.kt)("p",null,"We will use your ",(0,i.kt)("inlineCode",{parentName:"p"},"gff")," module to write a program called ",(0,i.kt)("inlineCode",{parentName:"p"},"gff_to_sqlite.py")," which:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"uses the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/argparse.html"},"argparse")," library to process\ncommand-line arguments for the input and output files.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"loads the data using your function above.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"stores the data in the output sqlite file."))),(0,i.kt)("p",null,"This turns out to be pretty easy. "),(0,i.kt)("h3",{id:"adding-command-line-options"},"Adding command-line options"),(0,i.kt)("p",null,"We'll start by importing the relevant stuff, and writing a\nfunction to parse the arguments. I find the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/argparse.html"},"argparse\ndocumentation")," a bit confusing, so here is\na quick head start:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'import argparse\nimport sqlite3\nimport gff # your module\n\ndef parse_arguments():\n    parser = argparse.ArgumentParser(\n        description = """Convert a GFF3 file to sqlite3 format.\n        The result will be a table with the GFF3 fields, and with ID and Parent fields in columns.\n        The resulting table will be indexed by the ID field for easy lookup."""\n    )\n    parser.add_argument(\n        \'--input\',\n        help =\'The path of a GFF3-formatted file to work with\',\n        required = True\n    )\n\n    # add other needed arguments here\n\n    return parser.parse_args()\n\nargs = parse_arguments()\n')),(0,i.kt)("p",null,"If you put this in a file called ",(0,i.kt)("inlineCode",{parentName:"p"},"gff_to_sqlite.py")," then you can run it from your shell like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"python gff_to_sqlite.py \n")),(0,i.kt)("p",null,"which will print something like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ python3 gff_to_sqlite.py \nusage: gff_to_sqlite.py [-h] --input INPUT\ngff_to_sqlite.py: error: the following arguments are required: --input\n")),(0,i.kt)("p",null,"I'll leave you to fill in the other needed arguments here. You will need an ",(0,i.kt)("inlineCode",{parentName:"p"},"--output")," option to\nspecify the output file, and because sqlite files can contain several tables, maybe also a\n",(0,i.kt)("inlineCode",{parentName:"p"},"--table")," option to specify the output table name. (If you specify, say, ",(0,i.kt)("inlineCode",{parentName:"p"},'default = "gff_data"')," for\nthis, instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"required=True"),", the argument will have a default value.)"),(0,i.kt)("p",null,"Implementing the program is pretty easy now.  We read in the data and write it to the database."),(0,i.kt)("h3",{id:"implementing-the-main-function"},"Implementing the main function"),(0,i.kt)("p",null,"Implementing the program itself is pretty easy thanks to our module. We read in the data and write it to the database. Let's put\nthat in a function called ",(0,i.kt)("inlineCode",{parentName:"p"},"process()")," which takes in the arguments and does the work:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"def process( args ):\n    (parse the data and write the output here)\n")),(0,i.kt)("h3",{id:"parsing-the-data"},"Parsing the data"),(0,i.kt)("p",null,"Parsing data is easy right?  You've already written it:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"data = gff.parse_gff_to_dataframe( args.input )\n")),(0,i.kt)("h3",{id:"adding-an-analysis-name"},"Adding an analysis 'name'"),(0,i.kt)("p",null,"The program can be used to put many gff files into one database. To separate them, let's give our table an 'analysis' column at\nthe start, that records what we were running:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"data.insert( 0, 'analysis', args.analysis_name )\n")),(0,i.kt)("p",null,"To make this work, you have to add an ",(0,i.kt)("inlineCode",{parentName:"p"},"analysis_name")," command-line argument - the user will have to supply this when they run the\nprogram."),(0,i.kt)("h3",{id:"outputting-to-sqlite"},"Outputting to sqlite"),(0,i.kt)("p",null,"This turns out to be very easy too. Pandas dataframes have a\n",(0,i.kt)("a",{parentName:"p",href:"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_sql.html"},(0,i.kt)("inlineCode",{parentName:"a"},".to_sql()")," function"),"\nthat does this for you. To make this work, you open the database and then run it:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"db = sqlite3.connect( args.output )\ndata.to_sql( args.table, db, index = False )\n")),(0,i.kt)("h3",{id:"adding-an-index"},"Adding an index"),(0,i.kt)("p",null,"To maximise the benefit of the relational nature of sqlite, you can, if you like, now add a sqlite ",(0,i.kt)("em",{parentName:"p"},"index")," on\nthe ID (or other columns) so lookups are quick. The correct incantation is:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'db.execute(\n    "CREATE INDEX IF NOT EXISTS `%s_ID_index` ON `%s`( ID )"\n    % (args.table, args.table )\n)\n')),(0,i.kt)("h3",{id:"closing-the-connection"},"Closing the connection"),(0,i.kt)("p",null,"We're meant to close the connection at the end:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"db.close()\n")),(0,i.kt)("h3",{id:"trying-it-out"},"Trying it out"),(0,i.kt)("p",null,"If all that went into a ",(0,i.kt)("inlineCode",{parentName:"p"},"process()")," function, you'd better call it:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"process( args )\n")),(0,i.kt)("p",null,"Job done!  Test it out in your shell like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"python gff_to_sqlite.py\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"usage: gff_to_sqlite.py [-h] --analysis_name ANALYSIS --input INPUT --output OUTPUT [--table TABLE]\n")),(0,i.kt)("p",null,"Now try running it on some real data:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"python gff_to_sqlite.py --input gencode.v41.annotation.gff3.gz --analysis_name Pf3D7 --output genes.sqlite\n")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Check how big the sqlite file is.  Is it larger or smaller than the input file?\n(What about if you uncompress the input file first?)"))),(0,i.kt)("h2",{id:"reading-results-from-any-language"},"Reading results from any language"),(0,i.kt)("p",null,"One of the cool things about this is that we can now access the data in any language we like - without really\nany extra effort.  Let's look at a few options:"),(0,i.kt)("h3",{id:"the-command-line"},"The command-line"),(0,i.kt)("p",null,"To use the results from the command-line, you can use the ",(0,i.kt)("a",{parentName:"p",href:"www.sqlite.org"},"sqlite3 command-line client")," to print\nthe contents:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'sqlite3 genes.sqlite "SELECT * FROM gff_data" | less -S\n')),(0,i.kt)("p",null,"This output format is probably not quite what you wanted. However, sqlite gives us lots of tools for getting the\nbit of data we want and in the right format. For example to output the locaitons of all the genes in a columnar\nformat:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"sqlite3 -header -column genes.sqlite \"SELECT analysis, seqid, start, end, strand FROM gff_data WHERE type == 'gene'\"\n")),(0,i.kt)("p",null,"Or to get a line-based output of all transcripts of the ",(0,i.kt)("em",{parentName:"p"},"ABO")," gene:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"sqlite3 -line genes.sqlite \"SELECT * FROM gff_data WHERE type == 'transcript' AND attributes LIKE '%Name=ABO%'\"\n")),(0,i.kt)("h3",{id:"python"},"Python"),(0,i.kt)("p",null,"Loading results in python is easy too using the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/sqlite3.html"},(0,i.kt)("inlineCode",{parentName:"a"},"sqlite3"),"\nmodule"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'import pandas, sqlite3\ndb = sqlite3.connect( "genes.sqlite" )\npandas.read_sql( "SELECT * FROM gff_data WHERE type==\'gene\'", db )\n')),(0,i.kt)("h3",{id:"r"},"R"),(0,i.kt)("p",null,"To load results in R, use the ",(0,i.kt)("a",{parentName:"p",href:"https://cran.r-project.org/web/packages/RSQLite/index.html"},"RSQLite")," package:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-R"},'library( RSQLite )\ndb = dbConnect( dbDriver( "SQLite" ), "genes.sqlite" )\ndbGetQuery( db, "SELECT * FROM gff_data WHERE type==\'gene\'"\n')),(0,i.kt)("h3",{id:"julia"},"Julia"),(0,i.kt)("p",null,"In Julia this is easy using the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/JuliaDatabases/SQLite.jl"},(0,i.kt)("inlineCode",{parentName:"a"},"SQLite.jl")," package"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-julia"},'using SQLite, DataFrames\ndb = SQLite.DB( "genes.sqlite" )\nDBInterface.execute( db, "SELECT * FROM gff_data WHERE type==\'gene\'" ) |> DataFrame\n')),(0,i.kt)("h3",{id:"on-the-web"},"On the web"),(0,i.kt)("p",null,"It's also possible to serve the database over the web - using ",(0,i.kt)("a",{parentName:"p",href:"https://datasette.io"},"datasette"),".\nAssuming you are using ",(0,i.kt)("a",{parentName:"p",href:"/whg-training-resources/prerequisites/CONDA"},"conda"),", install datasette like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"mamba install datasette\n")),(0,i.kt)("p",null,"To serve the database to your local machine, type:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"datasette serve genes.sqlite\n")),(0,i.kt)("p",null,"This starts the server process in your terminal. Visit ",(0,i.kt)("a",{parentName:"p",href:"http://127.0.0.1:8001"},"http://127.0.0.1:8001")," in your browser, and browse away!\n(Press Ctrl-C in your terminal to quit the server process when you're done.)"),(0,i.kt)("h2",{id:"finishing-touches"},"Finishing touches"),(0,i.kt)("p",null,"Your job is not done yet! Before leaving your program, spend a few minutes to make it as user-friendly as\npossible. The simplest way to do this is to add some ",(0,i.kt)("inlineCode",{parentName:"p"},"print()")," statements to the script to tell the user what\nthe script is doing.  Don't forget to include a 'Thank you for using...' message at the end!"),(0,i.kt)("h2",{id:"solutions"},"Solutions"),(0,i.kt)("p",null,"If you want some inspiration, ",(0,i.kt)("a",{target:"_blank",href:n(9372).Z},"my version of the program is here"),"."),(0,i.kt)("h2",{id:"back-to-the-task"},"Back to the task"),(0,i.kt)("p",null,"Now let's get ",(0,i.kt)("a",{parentName:"p",href:"/whg-training-resources/programming/programming_with_gene_annotations/Counting_genes_1"},"back to learning about genes"),"."))}d.isMDXComponent=!0},9372:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/files/gff_to_sqlite-3da145e8fcc6472a34542c47c68a7881.py"}}]);