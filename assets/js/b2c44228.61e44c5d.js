"use strict";(self.webpackChunkwhg_training_resources=self.webpackChunkwhg_training_resources||[]).push([[2564],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>g});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var r=n.createContext({}),p=function(e){var t=n.useContext(r),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(r.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,s=e.originalType,r=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=p(a),g=i,h=m["".concat(r,".").concat(g)]||m[g]||c[g]||s;return a?n.createElement(h,o(o({ref:t},d),{},{components:a})):n.createElement(h,o({ref:t},d))}));function g(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=a.length,o=new Array(s);o[0]=m;var l={};for(var r in t)hasOwnProperty.call(t,r)&&(l[r]=t[r]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<s;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},1319:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>r,contentTitle:()=>o,default:()=>c,frontMatter:()=>s,metadata:()=>l,toc:()=>p});var n=a(7462),i=(a(7294),a(3905));const s={title:"Data visualisation with tidyverse",author:"Samvida S. Venkatesh",date:"2021-10-21",output:"html_document"},o="Data visualisation with tidyverse",l={unversionedId:"data_visualisation/data_visualisation_with_ggplot2/dataviz",id:"data_visualisation/data_visualisation_with_ggplot2/dataviz",title:"Data visualisation with tidyverse",description:"In this tutorial we will explore data visualisation using the R packages",source:"@site/docs/data_visualisation/data_visualisation_with_ggplot2/dataviz.md",sourceDirName:"data_visualisation/data_visualisation_with_ggplot2",slug:"/data_visualisation/data_visualisation_with_ggplot2/dataviz",permalink:"/whg-training-resources/data_visualisation/data_visualisation_with_ggplot2/dataviz",draft:!1,editUrl:"https://github.com/whg-training/whg-training-resources/edit/main/docs/data_visualisation/data_visualisation_with_ggplot2/dataviz.md",tags:[],version:"current",frontMatter:{title:"Data visualisation with tidyverse",author:"Samvida S. Venkatesh",date:"2021-10-21",output:"html_document"},sidebar:"tutorialSidebar",previous:{title:"Visualisation with ggplot2",permalink:"/whg-training-resources/data_visualisation/data_visualisation_with_ggplot2/"},next:{title:"Next-generation sequencing",permalink:"/whg-training-resources/next_generation_sequencing/"}},r={},p=[{value:"Getting set up",id:"getting-set-up",level:2},{value:"A first look at <code>gapminder</code> data using ggplot",id:"a-first-look-at-gapminder-data-using-ggplot",level:2},{value:"A warmup plot",id:"a-warmup-plot",level:3},{value:"The distribution of GDP per capita.",id:"the-distribution-of-gdp-per-capita",level:2},{value:"The distribution of GDP per capita, by continent.",id:"the-distribution-of-gdp-per-capita-by-continent",level:2},{value:"Bring on the violins",id:"bring-on-the-violins",level:3},{value:"Adding summary statistics",id:"adding-summary-statistics",level:3},{value:"Reordering values",id:"reordering-values",level:3},{value:"Is gdp related to life expectancy?",id:"is-gdp-related-to-life-expectancy",level:3},{value:"Labelling points",id:"labelling-points",level:3},{value:"Saving your figures",id:"saving-your-figures",level:3},{value:"Facetting",id:"facetting",level:3},{value:"Other plots",id:"other-plots",level:3},{value:"Part 3 - Try it yourself!",id:"part-3---try-it-yourself",level:2}],d={toc:p};function c(e){let{components:t,...s}=e;return(0,i.kt)("wrapper",(0,n.Z)({},d,s,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"data-visualisation-with-tidyverse"},"Data visualisation with tidyverse"),(0,i.kt)("p",null,"In this tutorial we will explore data visualisation using the R packages\n",(0,i.kt)("a",{parentName:"p",href:"https://dplyr.tidyverse.org"},(0,i.kt)("inlineCode",{parentName:"a"},"dplyr"))," and ",(0,i.kt)("a",{parentName:"p",href:"https://ggplot2.tidyverse.org"},(0,i.kt)("inlineCode",{parentName:"a"},"ggplot2")),". "),(0,i.kt)("h2",{id:"getting-set-up"},"Getting set up"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"dplyr")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"ggplot2")," are part of ",(0,i.kt)("a",{parentName:"p",href:"https://www.tidyverse.org"},"tidyverse"),". If you followed the\n",(0,i.kt)("a",{parentName:"p",href:"/whg-training-resources/prerequisites/tidyverse"},"tidyverse installation section")," you'll have this already - if not let's install\nit now:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-R"},'install.packages("tidyverse") \n')),(0,i.kt)("p",null,"We'll use real data on population size, life expectancy and GDP from\n",(0,i.kt)("a",{parentName:"p",href:"https://www.gapminder.org"},"gapminder.org"),", and ecological data from\n",(0,i.kt)("a",{parentName:"p",href:"https://allisonhorst.github.io/palmerpenguins/"},"palmerpenguins"),", so let's install those packages\ntoo:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-R"},'install.packages("gapminder")\ninstall.packages("palmerpenguins")\n')),(0,i.kt)("p",null,"Lastly to make good-looking plots we need cool colour palettes - ",(0,i.kt)("a",{parentName:"p",href:"https://colorbrewer2.org"},"Color\nBrewer")," is one of these so let's install:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-R"},'install.packages("RColorBrewer")\n')),(0,i.kt)("p",null,"Load these into a running R session:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"library(ggplot2)\nlibrary(dplyr)\nlibrary(palmerpenguins)\nlibrary(RColorBrewer)\n")),(0,i.kt)("p",null,"As a last step we are going to default to a 'bw' style of plots, so let's set out ",(0,i.kt)("inlineCode",{parentName:"p"},"ggplot2")," theme now:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"ggplot2::theme_set(theme_bw())\n")),(0,i.kt)("h2",{id:"a-first-look-at-gapminder-data-using-ggplot"},"A first look at ",(0,i.kt)("inlineCode",{parentName:"h2"},"gapminder")," data using ggplot"),(0,i.kt)("p",null,"We'll use real population data from ",(0,i.kt)("a",{parentName:"p",href:"https://www.gapminder.org"},"gapminder.org"),". To load it, load\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"gapminder")," library: ",(0,i.kt)("inlineCode",{parentName:"p"},"library(gapminder)")),(0,i.kt)("p",null,"The gapminder data is now in a variable called ",(0,i.kt)("inlineCode",{parentName:"p"},"gapminder")," - we'll use this a lot so let's start by\nrenaming it to something shorter and taking a look:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-{r",metastring:"gapminder}","gapminder}":!0},"d <- gapminder\nView(d)\n# or just head(d) if not in RStudio\n")),(0,i.kt)("p",null,"The data contains measurements of life expectancy, population size, and gross domestic product\n(GDP) per capita for different years. The simplest way to see what's in there is to create some\nsummaries using the ",(0,i.kt)("inlineCode",{parentName:"p"},"table")," function:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-{r",metastring:"gapminder_tables}","gapminder_tables}":!0},"table( d$year )\nlength( unique( d$country ))\n")),(0,i.kt)("p",null,"Evidently the data contains entries for 12 years (with 5-year gaps between) and 142 countries.\nAre all 142 countries represented at all 12 timepoints?"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"stopifnot( nrow(d) == (12 * 142) )\nView( table(d$country, d$year) )\n")),(0,i.kt)("p",null,"Yes they are!"),(0,i.kt)("h3",{id:"a-warmup-plot"},"A warmup plot"),(0,i.kt)("p",null,"As a warmup let's use ",(0,i.kt)("inlineCode",{parentName:"p"},"ggplot")," to show the distribution of the continuous variables in the data:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-R"},"p = ggplot( data = d )\nprint( p + geom_histogram( aes( x = lifeExp ), bins = 25 ))\nprint( p + geom_histogram( aes( x = gdpPercap ), bins = 25 ))\nprint( p + geom_histogram( aes( x = pop ), bins = 25 ))\n")),(0,i.kt)("p",null,"This code illustrates how ggplot2 works: it creates a plot object (",(0,i.kt)("inlineCode",{parentName:"p"},"p")," above) that is associated\nwith some data; then 'layers' are added to draw things, such as the histogram layer above. What's\nmore, the layers are associated with ",(0,i.kt)("em",{parentName:"p"},"aesthetic mappings")," (",(0,i.kt)("inlineCode",{parentName:"p"},"aes()")," in the above) which tell ggplot\nhow the data variables should be mapped onto visual parameters (that is, things like bar height,\npoint size or colour, say.)  It should look something like this:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"img",src:a(2201).Z,width:"500",height:"300"})),(0,i.kt)("p",null,"A less obvious but essential feature is that the way these data -> visual mappings are presented is\ngoverned by ",(0,i.kt)("em",{parentName:"p"},"scales"),". In the above, the scales are implicit (both x and y scales are linear). But\nfor example, we could alter the ",(0,i.kt)("inlineCode",{parentName:"p"},"x")," scale of our plot so that bars are drawn in log space:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"print(\n    p\n    + geom_histogram( aes( x = pop), bins = 25 )\n    + scale_x_log10()\n)\n")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"img",src:a(3879).Z,width:"400",height:"300"})),(0,i.kt)("p",null,"Compare these last two plots - it might take you a few moments to see exactly what has happened. If\nyou compare the x axes you'll see that they both have the same overall range - they go roughly up\nto ",(0,i.kt)("inlineCode",{parentName:"p"},"1e09")," (whjich of course means ",(0,i.kt)("span",{parentName:"p",className:"math math-inline"},(0,i.kt)("span",{parentName:"span",className:"katex"},(0,i.kt)("span",{parentName:"span",className:"katex-mathml"},(0,i.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,i.kt)("semantics",{parentName:"math"},(0,i.kt)("mrow",{parentName:"semantics"},(0,i.kt)("mn",{parentName:"mrow"},"1"),(0,i.kt)("mo",{parentName:"mrow"},"\xd7"),(0,i.kt)("mn",{parentName:"mrow"},"1"),(0,i.kt)("msup",{parentName:"mrow"},(0,i.kt)("mn",{parentName:"msup"},"0"),(0,i.kt)("mn",{parentName:"msup"},"9"))),(0,i.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"1\\times 10^9")))),(0,i.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,i.kt)("span",{parentName:"span",className:"base"},(0,i.kt)("span",{parentName:"span",className:"strut",style:{height:"0.7278em",verticalAlign:"-0.0833em"}}),(0,i.kt)("span",{parentName:"span",className:"mord"},"1"),(0,i.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,i.kt)("span",{parentName:"span",className:"mbin"},"\xd7"),(0,i.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,i.kt)("span",{parentName:"span",className:"base"},(0,i.kt)("span",{parentName:"span",className:"strut",style:{height:"0.8141em"}}),(0,i.kt)("span",{parentName:"span",className:"mord"},"1"),(0,i.kt)("span",{parentName:"span",className:"mord"},(0,i.kt)("span",{parentName:"span",className:"mord"},"0"),(0,i.kt)("span",{parentName:"span",className:"msupsub"},(0,i.kt)("span",{parentName:"span",className:"vlist-t"},(0,i.kt)("span",{parentName:"span",className:"vlist-r"},(0,i.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.8141em"}},(0,i.kt)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,i.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,i.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,i.kt)("span",{parentName:"span",className:"mord mtight"},"9")))))))))))),", i.e. 1 billion.) But in the second plot every\ntick represents a point 10 times larger than the one below, that is, it is a log scale, while in\nthe first version the scale is linear."),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Questions")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ol",{parentName:"div"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Which version of the plot does a better job of presenting the data?")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Look at the histogram bars.  Is the histogram binning done ",(0,i.kt)("em",{parentName:"p"},"before")," the transformation to log-scale, or after it?"))))),(0,i.kt)("p",null,"A subtly different plot is produced if we ",(0,i.kt)("em",{parentName:"p"},"log-transform the data")," instead of changing the scale:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-R"},"print(\n    p\n    + geom_histogram( aes( x = log10(pop)), bins = 25 )\n)\n")),(0,i.kt)("p",null,"The plotted bars themselves look identical, but if you look closely you'll see the X axis scale has\nchanged to reflect the log values instead. Which one of these is better probably depends on the context."),(0,i.kt)("p",null,"For me, neither of the above plots is perfect - I want a plot that can be understood at a glance,\nwhich means including very clear axis labels. Something like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-R"},'print(\n    p\n    + geom_histogram( aes( x = pop), bins = 25 )\n    + scale_x_log10(\n        breaks = 10^c( 5, 6, 7, 8, 9 ),\n        labels = c(  "100 thousand", "1 million", "10 million", "100 million", "1 billion" )\n    )\n    + xlab( "Population size" )\n    + ylab( "Number of countries" )\n)\n')),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"img",src:a(3894).Z,width:"400",height:"300"})),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Question")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Most countries in this data have between about 1 and 100 million individuals in - a few have much\nlarger or smaller populations. Only two countries have populations larger than a billion. What are\nthey? Try finding out:"),(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre"},"d[ d$pop > 1E9 & d$year == '2007', ]\n")))),(0,i.kt)("p",null,"In the rest of this tutorial we'll use ggplot2 to explore the gapminder dataset in more detail. "),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"As\nwith other R objects, you can find documentation on ggplot2 using R's in-built help - for example\nto find out how the above works:"),(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-R"},"?scale_x_log10\n")),(0,i.kt)("p",{parentName:"div"},"ggplot2 also has ",(0,i.kt)("a",{parentName:"p",href:"https://ggplot2.tidyverse.org"},"extensive online documentation")," including a useful\ncheatsheet."))),(0,i.kt)("h2",{id:"the-distribution-of-gdp-per-capita"},"The distribution of GDP per capita."),(0,i.kt)("p",null,"In the rest of this tutorial we'll show various ways to create good-looking visualisations with\nthis data.  Let's get started."),(0,i.kt)("p",null,"Histograms are ok - they summarise the empirical distribution of data in a largely transparent way.\nHowever they look a bit jaggedy - the true distribution is probably a lot smoother than that. One\noption is instead to plot a ",(0,i.kt)("em",{parentName:"p"},"smoothed histogram"),", or ",(0,i.kt)("em",{parentName:"p"},"density plot"),". That's easy with ggplot -\nlet's plot the GDP per capita this way:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-{r",metastring:"gapminder_gdp}","gapminder_gdp}":!0},'p2_1 <- ggplot(data = d, mapping = aes(x = gdpPercap)) +\n  geom_density() +\n  labs(x = "GDP per capita", y = "Density")\n\np2_1\n')),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"img",src:a(5701).Z,width:"400",height:"300"})),(0,i.kt)("p",null,"As before let's change the scale of the x-axis to a log scale"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-{r",metastring:'gapminder_gdp_log, fig.show="hide"}',"gapminder_gdp_log,":!0,"fig.show":'"hide"}'},'p2_1 + scale_x_continuous(trans = "log10") \n# or scale_x_log10()\n')),(0,i.kt)("p",null,"...and make the axis breaks prettier"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-{r",metastring:"gapminder_gdp_pretty}","gapminder_gdp_pretty}":!0},'p2_1 + scale_x_continuous(\n    trans = "log10",\n    breaks = c(0, 1000, 5000, 10000, 50000, 150000)\n)\n')),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"img",src:a(2903).Z,width:"400",height:"300"})),(0,i.kt)("p",null,"Nice! But hmm... this is a bit odd looking - it has has at least two bumps. Let's next try to see\nif this is caused by the distribution of GDP per capita differing in different continents."),(0,i.kt)("h2",{id:"the-distribution-of-gdp-per-capita-by-continent"},"The distribution of GDP per capita, by continent."),(0,i.kt)("p",null,"Now we have another variable we want to add: continent. In a density plot, we can't add another\nvariable along the y-axis - so another way to show a different variable is to use colour."),(0,i.kt)("p",null,"Here, I assign both color and fill to continent to shade the area under the density plot."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-R"},'p2_2a <- ggplot(data = d, mapping = aes(x = gdpPercap, \n                                        color = continent,\n                                        fill = continent)) +\n  # the "alpha" parameter changes the transparency of the fill\n  # the "size" parameter changes the thickness of the lines\n  geom_density(alpha = 0.2, size = 1) +\n  # keep the log scaling we applied previously\n  scale_x_continuous(trans = "log10",\n                     breaks = c(0, 1000, 5000, 10000, 50000, 150000)) +\n  # change the labels for color and fill (which label the legend)\n  labs(x = "GDP per capita", y = "Density",\n       color = "Continent", fill = "Continent")\n\np2_2a\n')),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"img",src:a(842).Z,width:"500",height:"300"})),(0,i.kt)("p",null,"Let's change the colour scheme. People who are colour-blind do science, so let's try to keep plots\ncolour-blind friendly"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-{r",metastring:"colours}","colours}":!0},"display.brewer.all(colorblindFriendly = T)\n")),(0,i.kt)("p",null,"Since the continents are nominal (not ordered), we should use one of the qualitative color palettes\n(Set2 or Dark2) rather than a sequential one."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-{r",metastring:'gapminder_gdp_colours, fig.show="hide"}',"gapminder_gdp_colours,":!0,"fig.show":'"hide"}'},'p2_2a + scale_color_brewer(palette = "Dark2") +\n  scale_fill_brewer(palette = "Dark2")\n')),(0,i.kt)("h3",{id:"bring-on-the-violins"},"Bring on the violins"),(0,i.kt)("p",null,"Density plots like this look kindof nice, but can be difficult to interpret with many groups\noverlaid over each other.  Another way to plot multiple densities is a ",(0,i.kt)("em",{parentName:"p"},"violin plot"),"."),(0,i.kt)("p",null,"To make one, we'll reorganise the plot to have the continent on the x axis and the gdp distribution\non the y axis.  And, just for ease of identification we'll keep the colours as well:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-{r",metastring:"gapminder_gdp_violin}","gapminder_gdp_violin}":!0},'p2_2b <- ggplot(data = d, mapping = aes(x = continent,\n                                        y = gdpPercap,\n                                        color = continent,\n                                        fill = continent)) +\n  geom_violin() +\n  scale_y_continuous(trans = "log10",\n                     breaks = c(0, 1000, 5000, 10000, 50000, 150000)) +\n  scale_color_brewer(palette = "Dark2") +\n  scale_fill_brewer(palette = "Dark2") +\n  labs(x = "Continent", y = "GDP per capita")\n\np2_2b\n')),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"img",src:a(4339).Z,width:"500",height:"300"})),(0,i.kt)("p",null,"We can also get rid of the legend since it doesn't add any new information:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-{r",metastring:'gapminder_no_legend, fig.show="hide"}',"gapminder_no_legend,":!0,"fig.show":'"hide"}'},'p2_2b + theme(legend.position = "none")\n')),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"I like this plot with colours, but it does break one of the ",(0,i.kt)("strong",{parentName:"p"},"cardinal rules of data viz"),". This is\nthat it's best to map one feature of the data to one aesthetic (whereas here we have mapped\ncontinent to two: the x axis and colour at the same time.) Arguably as a ",(0,i.kt)("em",{parentName:"p"},"scientific plot")," (as\nopposed to a presentation tool) this is better without the colours:"),(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-R"},'print(\n    ggplot(data = d, mapping = aes(x = continent, y = gdpPercap))\n    + geom_violin( fill = \'grey\' )\n    + scale_y_continuous(trans = "log10",\n                       breaks = c(0, 1000, 5000, 10000, 50000, 150000))\n    + labs(x = "Continent", y = "GDP per capita")\n)\n')),(0,i.kt)("p",{parentName:"div"},(0,i.kt)("img",{alt:"img",src:a(6729).Z,width:"400",height:"300"})),(0,i.kt)("p",{parentName:"div"},"...because the colours distract from the distributions. (But to demo the possibilities we'll stick\nwith the colours for now.)"))),(0,i.kt)("h3",{id:"adding-summary-statistics"},"Adding summary statistics"),(0,i.kt)("p",null,"These violins are essentially vertically-plotted, back-to-back histograms. They are pretty useful\nand look good, but don't directly provide any quantification. To improve that, let's also add\nsome summary statistics such as the median and the inter-quartile range (IQR) as a boxplot on top\nof the violins. Remember that we set the fill and color to match continents in the overall plot\naesthetics, so if we don't override that here, the overlaid boxplots will have the same fill and\ncolor as the violins."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-{r",metastring:'gapminder_box, fig.show="hide"}',"gapminder_box,":!0,"fig.show":'"hide"}'},'p2_2b + \n  geom_boxplot(width = 0.1, color = "black", fill = "white") +\n  theme(legend.position = "none")\n')),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"img",src:a(1534).Z,width:"400",height:"300"})),(0,i.kt)("p",null,"Sweet! This illustrates an important feature of ggplot2: the aesthetic mapping can be set on the\nplot object itself, but can also be set (or overridden) seperately for each layer, allowing great\nflexibility in the plot appearance."),(0,i.kt)("h3",{id:"reordering-values"},"Reordering values"),(0,i.kt)("p",null,"To make this plot easier to read, let's order the plots by median GDP per capita."),(0,i.kt)("p",null,"To do this in ggplot takes a bit of data manipulation - essentially, we tell ggplot what order we\nwant continents in by ordering them in the data itself. To do this we will ",(0,i.kt)("em",{parentName:"p"},"reorder the levels of\nthe ",(0,i.kt)("inlineCode",{parentName:"em"},"continent")," variable"),". This works because ",(0,i.kt)("inlineCode",{parentName:"p"},"continent")," is actually a ",(0,i.kt)("strong",{parentName:"p"},"factor")," - discrete\nvalues with a specific set of levels.  You can see them using the ",(0,i.kt)("inlineCode",{parentName:"p"},"levels")," function:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"levels(d$continent)\n")),(0,i.kt)("p",null,"Right now they are in alphabetical order. Let's use ",(0,i.kt)("inlineCode",{parentName:"p"},"dplyr")," to add a new column with the same\ncontinent in, but now ordered by per capita gdp:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"d$orderedContinent = reorder( d$continent, d$gdpPercap, FUN = median )\n")),(0,i.kt)("p",null,"You should see something like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"# A tibble: 1,704 \xd7 7\n   country     continent  year lifeExp      pop gdpPercap orderedContinent\n   <fct>       <fct>     <int>   <dbl>    <int>     <dbl> <fct>           \n 1 Afghanistan Asia       1952    28.8  8425333      779. Asia            \n 2 Afghanistan Asia       1957    30.3  9240934      821. Asia            \n 3 Afghanistan Asia       1962    32.0 10267083      853. Asia            \n 4 Afghanistan Asia       1967    34.0 11537966      836. Asia            \n 5 Afghanistan Asia       1972    36.1 13079460      740. Asia            \n 6 Afghanistan Asia       1977    38.4 14880372      786. Asia            \n 7 Afghanistan Asia       1982    39.9 12881816      978. Asia            \n 8 Afghanistan Asia       1987    40.8 13867957      852. Asia            \n 9 Afghanistan Asia       1992    41.7 16317921      649. Asia            \n10 Afghanistan Asia       1997    41.8 22227415      635. Asia            \n# \u2026 with 1,694 more rows\n# \u2139 Use `print(n = ...)` to see more rows\n")),(0,i.kt)("p",null,"Importantly the new variable is in a different order:\n$ levels(d$orderedContinent)\n","[1]",' "Africa"   "Americas" "Asia"     "Europe"   "Oceania" '),(0,i.kt)("p",null,"So let's plot - don't forget to update to use the new ",(0,i.kt)("inlineCode",{parentName:"p"},"orderedContinent")," variable:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-{r",metastring:"gapminder_ordered_violins}","gapminder_ordered_violins}":!0},'  ggplot(\n    data = d,\n    mapping = aes(\n      x = orderedContinent,\n      y = gdpPercap,\n      color = orderedContinent,\n      fill = orderedContinent)\n  ) +\n  geom_violin() +\n  geom_boxplot( width = 0.1, color = "black", fill = "white" ) +\n  scale_y_continuous(trans = "log10",\n                     breaks = c(0, 1000, 5000, 10000, 50000, 150000)) +\n  scale_color_brewer(palette = "Dark2") +\n  scale_fill_brewer(palette = "Dark2") +\n  labs(x = "Continent", y = "GDP per capita") +\n  theme(legend.position = "none")\n')),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"img",src:a(278).Z,width:"400",height:"300"})),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"A fancier way to make these data manipulations is to use ",(0,i.kt)("inlineCode",{parentName:"p"},"dplyr"),' to "pipe" the data through\nmutating functions. The ',(0,i.kt)("inlineCode",{parentName:"p"},"%>%")," syntax is used for this (kindof similar to how the ",(0,i.kt)("inlineCode",{parentName:"p"},"|")," character is\nused in the UNIX shell).  Mutating the dataframe on the fly would look like this:"),(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-R"},"d %>% mutate(\n    orderedContinent = reorder(continent, gdpPercap, FUN = median)\n)\n")),(0,i.kt)("p",{parentName:"div"},"It's also possible to pipe the output straight into ggplot - in this case we skip the ",(0,i.kt)("inlineCode",{parentName:"p"},"data"),"\nargument as the data is piped in:"),(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-R"},"d %>% mutate(\n    orderedContinent = reorder(continent, gdpPercap, FUN = median)\n) %>% ggplot(\n  mapping = aes( ... )\n  ...(etc.)\n")),(0,i.kt)("p",{parentName:"div"},"Whether this is clearer or not is a matter of personal preference - it certainly can make for\nshorter code."))),(0,i.kt)("h3",{id:"is-gdp-related-to-life-expectancy"},"Is gdp related to life expectancy?"),(0,i.kt)("p",null,"In the above we've been looking at the distribution of gdp across all years in the data."),(0,i.kt)("p",null,"But now let's focus on a single year:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-{r",metastring:"gapminder_subset}","gapminder_subset}":!0},"d07 <- d[d$year == 2007, ]\n")),(0,i.kt)("p",null,"and ask if the variables are related to each other."),(0,i.kt)("p",null,"The simplest and often best way to show the relationship between two variables is a ",(0,i.kt)("em",{parentName:"p"},"scatter plot"),".\nA basic scatter plot is easy:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'print(\n  ggplot( data = d07, aes( x = gdpPercap, y = lifeExp ))\n  + geom_point()\n  + scale_x_continuous(trans = "log10")\n)\n')),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"img",src:a(8409).Z,width:"400",height:"300"})),(0,i.kt)("p",null,"However, we already suspect this may differ by continent so let's colour by continent - and fix up\nthe axis labels etc. as we have been doing:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-{r",metastring:"gapminder_scatter}","gapminder_scatter}":!0},'p2_3a <- ggplot(\n  data = d07,\n  mapping = aes(x = gdpPercap, y = lifeExp, colour = continent)\n) +\ngeom_point() +\nscale_color_brewer(palette = "Dark2") +\n# we know GDP per capita is best viewed on a log scale\nscale_x_continuous(trans = "log10",\n                     breaks = c(0, 1000, 5000, 10000, 50000, 150000)) +\nlabs(\n  x = "GDP per capita",\n  y = "Life Expectancy",\n  color = "Continent",\n  title = "Year: 2007"\n)\n\np2_3a\n')),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"img",src:a(5868).Z,width:"500",height:"300"})),(0,i.kt)("p",null,"It looks like there is a trend here! let's plot some trend lines with geom_smooth - starting with a simple linear model."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-{r",metastring:'gapminder_trend, fig.show="hide"}',"gapminder_trend,":!0,"fig.show":'"hide"}'},'p2_3a + geom_smooth(method = "lm", \n                    color = "black", fill = "grey")\n')),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"img",src:a(3814).Z,width:"500",height:"300"})),(0,i.kt)("p",null,"We can even fit a separate regression line to each continent."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-{r",metastring:'gapminder_trend_continent, fig.show="hide", warning=FALSE, message=FALSE}',"gapminder_trend_continent,":!0,"fig.show":'"hide",',warning:"FALSE,",message:"FALSE}"},'p2_3b = p2_3a + geom_smooth(aes(color = continent, fill = continent),\n                    method = "lm") +\n  scale_fill_brewer(palette = "Dark2") +\n  labs(color = "Continent", fill = "Continent")\np2_3b\n')),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"img",src:a(1815).Z,width:"500",height:"300"})),(0,i.kt)("p",null,"That's pretty interesting. In all the continents this data suggests a strong relationship between\nper-capita GDP and life expectancy across countries, with (visually at least) similar slopes."),(0,i.kt)("h3",{id:"labelling-points"},"Labelling points"),(0,i.kt)("p",null,"Some countries seem to buck this trend however.  It would be useful to label them.\nLet's try that now.  We'll use some thresholds based on the above plot to pick countries for labelling:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-R"},"dat_label <- d07[\n  (d07$gdpPercap > 3000 & d07$lifeExp < 50)\n  | (d07$gdpPercap < 1000 & d07$lifeExp > 55),\n]\n")),(0,i.kt)("p",null,"This is countries with high per-capita gdp but low life expectancy, or vice versa - if you look at\nthis dataframe you'll see there are 10 of them. Let's add them to our plot:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"p2_3c <- p2_3b +\n# for the label layer, let's jsut use the subsetted data.\n# Setting position nudge moves the labels away from the points\ngeom_text(\n  data = dat_label,\n  aes(label = country),\n  position = position_nudge(x = -0.1, y = -1),\n  show.legend = F\n)\np2_3c\n")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"img",src:a(511).Z,width:"500",height:"300"})),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Despite the 'nudge', some of the labels are still on top of each other. One thing to try is the\n",(0,i.kt)("inlineCode",{parentName:"p"},"geom_text_repel()")," geom which is provided by the ",(0,i.kt)("inlineCode",{parentName:"p"},"ggrepel")," package instead.  Install it like this:"),(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-R"},"install.packages( 'ggrepel' )\n")),(0,i.kt)("p",{parentName:"div"},"And now you can write:"),(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre"},"p2_3b +\n# for the label layer, let's jsut use the subsetted data.\n# Setting position nudge moves the labels away from the points\ngeom_text_repel(\n  data = dat_label,\n  aes(label = country),\n  show.legend = F\n)\n")),(0,i.kt)("p",{parentName:"div"},(0,i.kt)("img",{alt:"img",src:a(6762).Z,width:"500",height:"300"})),(0,i.kt)("p",{parentName:"div"},(0,i.kt)("inlineCode",{parentName:"p"},"ggrepel")," has moved the labels off each other. (Still, it's still not totally obvious which points\ngo with with label. In general you can spend a lot of time getting labels like this in the right\nplaces - we'll leave it there for now.)"))),(0,i.kt)("h3",{id:"saving-your-figures"},"Saving your figures"),(0,i.kt)("p",null,"Make sure you don't lose all your hard work - let's save the plot to a pdf. (You can also save to\ntiff, png, etc., but pdfs have the nice property that they don't lose anything due to image\nresolution - I suggest using them unless your plot has a huge number of points.)"),(0,i.kt)("p",null,"You can do this in RStudio by clicking on the ",(0,i.kt)("inlineCode",{parentName:"p"},"Export")," button just above the plot pane.  Alternatively in R itself:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-R"},'ggsave(\n  plot = p2_3c,\n  filename = "gdp_vs_lifeexp_2007.pdf",\n  width = 6,\n  height = 4\n)\n')),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"For pdf files, widths and heights are specified in inches by default. You can change this using the\n",(0,i.kt)("inlineCode",{parentName:"p"},"units")," argument - see an example below."))),(0,i.kt)("h3",{id:"facetting"},"Facetting"),(0,i.kt)("p",null,"Our plot only shows one year of the data. What if we want to show all years at once? We'd like a\nway to split the plot into several panes. This is what ",(0,i.kt)("em",{parentName:"p"},"facets")," are designed for."),(0,i.kt)("p",null,"Let's give it a go using the\n",(0,i.kt)("a",{parentName:"p",href:"https://ggplot2.tidyverse.org/reference/facet_wrap.html"},(0,i.kt)("inlineCode",{parentName:"a"},"facet_wrap()"))," command.  This tells\nggplot2 to split up the plot based on the value of a (categorical) variable - and arrange them as\nmultiple panes wrapping into a larger plot."),(0,i.kt)("p",null,"First, let's plot the data without the facet applied."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-R"},'p2_3d <- (\n  ggplot(\n    data = d,\n    mapping = aes(x = gdpPercap, y = lifeExp,  color = continent)\n  ) +\n  geom_point() +\n  scale_color_brewer(palette = "Dark2") +\n  # the scales::comma parameter changes the way axis ticks are displayed\n  scale_x_continuous(trans = "log10", labels = scales::comma) +\n  labs(\n    x = "GDP per capita",\n    y = "Life Expectancy",\n    color = "Continent"\n  )\n)\n\np2_3d\n')),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"img",src:a(3703).Z,width:"500",height:"300"})),(0,i.kt)("p",null,"Not surprisingly it's pretty messy because all the data is on the same pane. Now let's add the\nfacet:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"p2_3d + facet_wrap(~year, nrow = 4, ncol = 3)\n")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"img",src:a(4698).Z,width:"800",height:"600"})),(0,i.kt)("p",null,"Finally let's also save this plot to a ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/TIFF"},"tiff")," and specify plot\ndimensions and resolution - useful for publications:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-R"},'ggsave(\n  plot = p2_3d + facet_wrap(~year, nrow = 4, ncol = 3),\n  filename = "gdp_vs_lifeexp_allyears.tiff", \n  units = "cm",\n  height = 23,\n  width = 16.8,\n  dpi = 300\n)\n')),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Questions")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"One of the Asian countries is a huge outlier - very high GDP from the 1950s onwards.  Which is it?"),(0,i.kt)("p",{parentName:"div"},"Another country has especially low life expectancy 1992 - which is it?"),(0,i.kt)("p",{parentName:"div"},"What happens if you facet by country instead is this useful?"),(0,i.kt)("p",{parentName:"div"},"Can you add outlier labels to this plot as we did before?"))),(0,i.kt)("h3",{id:"other-plots"},"Other plots"),(0,i.kt)("p",null,"There are of course lots of other ways we could visualise this data -\nfor example here is a plot using ",(0,i.kt)("inlineCode",{parentName:"p"},"geom_line")," to focus on a few countries over time:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-R"},"print( \n  ggplot(\n    data = d[ d$country %in% c( 'Japan', 'China', 'Norway', 'United States', 'Iraq' ), ],\n    mapping = aes( x = gdpPercap, y = lifeExp, colour = country )\n  )\n  + geom_line()\n  + geom_point()\n  + geom_text( aes( label = year ), nudge_x = 0, nudge_y = 1, size = 2 )\n  + scale_color_brewer(palette = \"Dark2\")\n)\n")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"img",src:a(619).Z,width:"500",height:"300"})),(0,i.kt)("p",null,"The sky is the limit - hopefully this tutorial has given you a start in how to explore the\npossibilites. Read the ",(0,i.kt)("a",{parentName:"p",href:"https://ggplot2.tidyverse.org"},"ggplot2 documentation")," for many more ideas."),(0,i.kt)("h2",{id:"part-3---try-it-yourself"},"Part 3 - Try it yourself!"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-{r",metastring:"penguins}","penguins}":!0},"d <- penguins\n")),(0,i.kt)("p",null,"Feel free to copy code from previous sections, or come up with your own."))}c.isMDXComponent=!0},4698:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/facetted-100978c20f3dc84f063ffcd1f486ce51.png"},5701:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/gdp_density_1-8338dee70ce220736646637685f9adee.png"},2903:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/gdp_density_2-f1df37689ea009ab677046e7cf2ccc23.png"},842:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/gdp_density_by_continent-e3795d60f612f9cbc6e292b06f3f1cec.png"},4339:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/gdp_violin_by_continent-eaaf39e1e42215d275100d48a4dd8b40.png"},1534:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/gdp_violin_by_continent_2-a7682fbefc4bbbbc53715bfcb860c6b3.png"},278:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/gdp_violin_by_continent_3-eef40ee7c82b728c4fe0e5cc94c238a3.png"},6729:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/gdp_violin_by_continent_grey-db3065b6687c9351a014c379c7c958dd.png"},619:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/lines-d174bc7471887f510acc7659d2c66d01.png"},2201:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/pop1-1810abdae730d771998235a23fc6bf24.png"},3879:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/pop2-0ff66149bb0126fa312589bbf8757086.png"},3894:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/pop4-4597fe8cd34500edaa77f80320440b9f.png"},8409:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/scatterplot_1-117e1daf7d2f8f72c5613774d9a0ab1a.png"},5868:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/scatterplot_2-29bbcbcf6b24083c5483a215fc89b027.png"},3814:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/scatterplot_3-2b4cfb00cde1129d5b9fffcf4ffe41d3.png"},1815:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/scatterplot_4-f1ca4163879e70d759e60ec5cd299ece.png"},511:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/scatterplot_labels_1-65362b1d13722a860348c3225f0ac461.png"},6762:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/scatterplot_labels_2-8794e24d4468c6102ef7db22a24674a4.png"},3703:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/unfacetted-f7f5f74729c7303940ccc4926fdde528.png"}}]);