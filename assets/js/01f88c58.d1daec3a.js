"use strict";(self.webpackChunkwhg_training_resources=self.webpackChunkwhg_training_resources||[]).push([[8344],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>u});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=p(n),u=o,h=m["".concat(l,".").concat(u)]||m[u]||c[u]||r;return n?a.createElement(h,i(i({ref:t},d),{},{components:n})):a.createElement(h,i({ref:t},d))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2360:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(7294),o=n(6010);const r="tabItem_OmH5";function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,o.Z)(r,i),hidden:n},t)}},9877:(e,t,n)=>{n.d(t,{Z:()=>u});var a=n(7462),o=n(7294),r=n(2389),i=n(7392),s=n(7094),l=n(2466),p=n(6010);const d="tabList_uSqn",c="tabItem_LplD";function m(e){var t,n;const{lazy:r,block:m,defaultValue:u,values:h,groupId:g,className:v}=e,k=o.Children.map(e.children,(e=>{if((0,o.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),N=h??k.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),w=(0,i.l)(N,((e,t)=>e.value===t.value));if(w.length>0)throw new Error(`Docusaurus error: Duplicate values "${w.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const f=null===u?u:u??(null==(t=k.find((e=>e.props.default)))?void 0:t.props.value)??(null==(n=k[0])?void 0:n.props.value);if(null!==f&&!N.some((e=>e.value===f)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${f}" but none of its children has the corresponding value. Available values are: ${N.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:b,setTabGroupChoices:y}=(0,s.U)(),[_,x]=(0,o.useState)(f),T=[],{blockElementScrollPositionUntilNextRender:C}=(0,l.o5)();if(null!=g){const e=b[g];null!=e&&e!==_&&N.some((t=>t.value===e))&&x(e)}const E=e=>{const t=e.currentTarget,n=T.indexOf(t),a=N[n].value;a!==_&&(C(t),x(a),null!=g&&y(g,a))},S=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{const t=T.indexOf(e.currentTarget)+1;n=T[t]||T[0];break}case"ArrowLeft":{const t=T.indexOf(e.currentTarget)-1;n=T[t]||T[T.length-1];break}}null==(t=n)||t.focus()};return o.createElement("div",{className:(0,p.Z)("tabs-container",d)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,p.Z)("tabs",{"tabs--block":m},v)},N.map((e=>{let{value:t,label:n,attributes:r}=e;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:_===t?0:-1,"aria-selected":_===t,key:t,ref:e=>T.push(e),onKeyDown:S,onFocus:E,onClick:E},r,{className:(0,p.Z)("tabs__item",c,null==r?void 0:r.className,{"tabs__item--active":_===t})}),n??t)}))),r?(0,o.cloneElement)(k.filter((e=>e.props.value===_))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},k.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==_})))))}function u(e){const t=(0,r.Z)();return o.createElement(m,(0,a.Z)({key:String(t)},e))}},7363:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var a=n(7462),o=(n(7294),n(3905));n(9877),n(2360);const r={sidebar_position:5},i="Investigating human genes",s={unversionedId:"programming/programming_with_gene_annotations/exploring_gencode",id:"programming/programming_with_gene_annotations/exploring_gencode",title:"Investigating human genes",description:"If our module is any good, we should be able to do all the things we were [able to do on",source:"@site/docs/programming/programming_with_gene_annotations/exploring_gencode.md",sourceDirName:"programming/programming_with_gene_annotations",slug:"/programming/programming_with_gene_annotations/exploring_gencode",permalink:"/whg-training-resources/programming/programming_with_gene_annotations/exploring_gencode",draft:!1,editUrl:"https://github.com/whg-training/whg-training-resources/edit/main/docs/programming/programming_with_gene_annotations/exploring_gencode.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Writing a useful conversion program.",permalink:"/whg-training-resources/programming/programming_with_gene_annotations/Converting_gff_to_sqlite"},next:{title:"Counting genes I",permalink:"/whg-training-resources/programming/programming_with_gene_annotations/Counting_genes_1"}},l={},p=[{value:"Loading the data",id:"loading-the-data",level:3},{value:"Viewing the data",id:"viewing-the-data",level:3},{value:"How many of each type of gene are there?",id:"how-many-of-each-type-of-gene-are-there",level:3},{value:"Investigating a single gene",id:"investigating-a-single-gene",level:3},{value:"Going beyond simple queries",id:"going-beyond-simple-queries",level:2},{value:"Next steps",id:"next-steps",level:2}],d={toc:p};function c(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"investigating-human-genes"},"Investigating human genes"),(0,o.kt)("p",null,"If ",(0,o.kt)("a",{parentName:"p",href:"/whg-training-resources/programming/programming_with_gene_annotations/making_a_module"},"our module")," is any good, we should be able to do all the things we were ",(0,o.kt)("a",{parentName:"p",href:"/bioinformatics/exploring_gene_annotations_in_bash"},"able to do on\nthe command line")," - and more. Let's see if we can."),(0,o.kt)("h3",{id:"loading-the-data"},"Loading the data"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"import gff\nX = gff.parse_gff3_to_dataframe( 'gencode.v41.annotation.gff3.gz' )\n")),(0,o.kt)("h3",{id:"viewing-the-data"},"Viewing the data"),(0,o.kt)("p",null,"This is either easier or harder than in the command-line, depending on how you look at it. One one hand\nthere's no equivalent of ",(0,o.kt)("inlineCode",{parentName:"p"},"less")," - we can't scroll around the data. About the best we can do is print it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"print(X)\n")),(0,o.kt)("p",null,"That's ok (it shows us the first few and the last few rows), but for example the attributes column is a bit hard\nto look at."),(0,o.kt)("p",null,"On the other hand we can easily get at individual rows and columns, by name, in a way we couldn't before. For\nexample, to look just at the ",(0,o.kt)("inlineCode",{parentName:"p"},"ID")," column, we would use ",(0,o.kt)("inlineCode",{parentName:"p"},"X['ID']")," or just ",(0,o.kt)("inlineCode",{parentName:"p"},"X.ID"),". Similarly, suppose we want to\nlook at rows 30-32 inclusive:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"X.iloc[30:33]\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"                          ID             Parent seqid  source  type  start    end  score strand phase                                         attributes\n30  exon:ENST00000473358.1:1  ENST00000473358.1  chr1  HAVANA  exon  29554  30039    NaN      +   NaN  ID=exon:ENST00000473358.1:1;Parent=ENST0000047...\n31  exon:ENST00000473358.1:2  ENST00000473358.1  chr1  HAVANA  exon  30564  30667    NaN      +   NaN  ID=exon:ENST00000473358.1:2;Parent=ENST0000047...\n32  exon:ENST00000473358.1:3  ENST00000473358.1  chr1  HAVANA  exon  30976  31097    NaN      +   NaN  ID=exon:ENST00000473358.1:3;Parent=ENST0000047...\n")),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"To select rows by integer index like this, you are supposed to use the ",(0,o.kt)("inlineCode",{parentName:"p"},".iloc")," notation. To get rows by 'row\nname', or for more complex queries, you are supposed to use ",(0,o.kt)("inlineCode",{parentName:"p"},".loc")," instead - for example"),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre"},"X.loc[(X.seqid == 'chr2') & (X.type == 'gene')]\n")),(0,o.kt)("p",{parentName:"div"},"This ",(0,o.kt)("inlineCode",{parentName:"p"},".loc"),"/",(0,o.kt)("inlineCode",{parentName:"p"},".iloc")," notation feels a bit clunky to me compared to R (or julia) data frames, but it works."))),(0,o.kt)("p",null,"Meanwhile, we have all the power of python available to look at it. So for example, suppose we wanted to unpack\nthe attributes on each row into a ",(0,o.kt)("a",{parentName:"p",href:"https://docs.python.org/3/tutorial/datastructures.html"},"dict"),".  We could do:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'def parse_attributes( attributes ):\n    """Parse the GFF3 attributes string into a dict of key=value pairs"""\n    result = {}\n    elts = attributes.split(";")\n    for elt in elts:\n        (key, value) = elt.split( "=" )\n        result[key] = value\n    return result\n    \nlist(\n    X.iloc[30:33]\n    .attributes\n    .apply( parse_attributes )\n)\n')),(0,o.kt)("h3",{id:"how-many-of-each-type-of-gene-are-there"},"How many of each type of gene are there?"),(0,o.kt)("p",null,"The pandas ",(0,o.kt)("a",{parentName:"p",href:"https://pandas.pydata.org/docs/reference/api/pandas.Series.value_counts.html"},"`value_counts()`` function")," makes this\neasy:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"X['type'].value_counts()\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"exon                                      1625321\nCDS                                        872459\ntranscript                                 251236\nthree_prime_UTR                            203260\nfive_prime_UTR                             171599\nstart_codon                                 97009\nstop_codon                                  90749\ngene                                        61852\nstop_codon_redefined_as_selenocysteine        119\nName: type, dtype: int64\n")),(0,o.kt)("p",null,"But we still have the problem that we are counting not just protein-coding genes, but all gene records."),(0,o.kt)("p",null,"In the command-line, we used a ",(0,o.kt)("inlineCode",{parentName:"p"},"grep")," command to do this - we could mimic that here:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"selection = X['attributes'].apply( str.contains( 'gene_type=protein_coding' )\nX.loc[selection]['type'].value_counts()\n")),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"The above uses the pandas ",(0,o.kt)("inlineCode",{parentName:"p"},".str")," function which makes it easy to work with columns of string values.\nIt is described on the pandas ",(0,o.kt)("a",{parentName:"p",href:"https://pandas.pydata.org/pandas-docs/stable/user_guide/text.html"},"page about working with text"),"."))),(0,o.kt)("p",null,"Using this 'look for \"gene_type=","<","something&rt;\"' syntax is a bit dis-satisfying - couldn't we isolate the\ngene type as it's own column?  We'll come back to that later on."),(0,o.kt)("h3",{id:"investigating-a-single-gene"},"Investigating a single gene"),(0,o.kt)("p",null,"What about individual genes? Let's again look up ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/FUT2"},"FUT2"),"."),(0,o.kt)("p",null,"We can find the gene..."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"X.loc[ X.attributes.str.contains( 'gene_name=FUT2' ) & (X.type == \"gene\") ]\n")),(0,o.kt)("p",null,"...its transcripts...."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"X.loc[ ( X.Parent == 'ENSG00000176920.13' ) & (X.type == \"transcript\") ]\n")),(0,o.kt)("p",null,"...and its exons...."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"X.loc[ (X.Parent == 'ENST00000425340.3') & (X.type == \"exon\") ]\n")),(0,o.kt)("p",null,"...pretty easily."),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Again, it would have been nice if we had the gene name ",(0,o.kt)("inlineCode",{parentName:"p"},"gene_name")," attribute as a seperte column so we could\nfilter on it - but the above works."))),(0,o.kt)("h2",{id:"going-beyond-simple-queries"},"Going beyond simple queries"),(0,o.kt)("p",null,"andas/python give us tools to do more advanced queries as well. For example: suppose we want to know the\nnumber of transcripts per gene. To do this, a conceptually natural way would be: take all transcripts, group\nthem by their gene (i.e. ",(0,o.kt)("inlineCode",{parentName:"p"},"Parent"),"), and then produce counts. Pandas lets us do this directly (if only you can\nfigure out the right syntax):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"transcript_counts = (\n  X.loc[ X.type == 'transcript' ]\n    .Parent\n    .value_counts()\n)\n")),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"The brackets ",(0,o.kt)("inlineCode",{parentName:"p"},"()")," around this are so that python treats it all as one expression."))),(0,o.kt)("p",null,"The result is something like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"ENSG00000179818.17    296\nENSG00000215386.15    258\nENSG00000109339.24    192\nENSG00000249859.14    190\nENSG00000226674.11    189\n                     ... \nENSG00000278438.1       1\nENSG00000247853.2       1\nENSG00000251898.1       1\nENSG00000251010.1       1\nENSG00000210196.2       1\nName: Parent, Length: 61852, dtype: int64\n")),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Question")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"What is that gene with the most transcripts?  Is it protein-coding?"))),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Unlike the dataframe ",(0,o.kt)("inlineCode",{parentName:"p"},"X"),", which has integers for row ids, this result has an 'index' made up of gene IDs\n(printed on the left). This means you can look it up by ",(0,o.kt)("inlineCode",{parentName:"p"},"ID")," e.g. in the form"),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre"},"transcript_counts.loc( 'ENSGXXX....' )\n")),(0,o.kt)("p",{parentName:"div"},"Check it gets the answer right for ",(0,o.kt)("em",{parentName:"p"},"FUT2"),"."))),(0,o.kt)("h2",{id:"next-steps"},"Next steps"),(0,o.kt)("p",null,"In short we can do everything that's doable\n",(0,o.kt)("a",{parentName:"p",href:"/bioinformatics/exploring_gene_annotations_in_bash"},"on the UNIX command-line")," - and more."),(0,o.kt)("p",null,"Before going further, though, there are a few things we need to fix - we need a ",(0,o.kt)("a",{parentName:"p",href:"a_refactor.md"},"refactor"),"."))}c.isMDXComponent=!0}}]);