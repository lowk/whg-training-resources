"use strict";(self.webpackChunkwhg_training_resources=self.webpackChunkwhg_training_resources||[]).push([[5049],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>c});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),h=p(n),c=r,d=h["".concat(l,".").concat(c)]||h[c]||u[c]||i;return n?a.createElement(d,o(o({ref:t},m),{},{components:n})):a.createElement(d,o({ref:t},m))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},2360:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(7294),r=n(6010);const i="tabItem_OmH5";function o(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(i,o),hidden:n},t)}},9877:(e,t,n)=>{n.d(t,{Z:()=>c});var a=n(7462),r=n(7294),i=n(2389),o=n(7392),s=n(7094),l=n(2466),p=n(6010);const m="tabList_uSqn",u="tabItem_LplD";function h(e){var t,n;const{lazy:i,block:h,defaultValue:c,values:d,groupId:g,className:k}=e,f=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),y=d??f.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),w=(0,o.l)(y,((e,t)=>e.value===t.value));if(w.length>0)throw new Error(`Docusaurus error: Duplicate values "${w.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const b=null===c?c:c??(null==(t=f.find((e=>e.props.default)))?void 0:t.props.value)??(null==(n=f[0])?void 0:n.props.value);if(null!==b&&!y.some((e=>e.value===b)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${b}" but none of its children has the corresponding value. Available values are: ${y.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:N,setTabGroupChoices:v}=(0,s.U)(),[_,C]=(0,r.useState)(b),E=[],{blockElementScrollPositionUntilNextRender:O}=(0,l.o5)();if(null!=g){const e=N[g];null!=e&&e!==_&&y.some((t=>t.value===e))&&C(e)}const T=e=>{const t=e.currentTarget,n=E.indexOf(t),a=y[n].value;a!==_&&(O(t),C(a),null!=g&&v(g,a))},x=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{const t=E.indexOf(e.currentTarget)+1;n=E[t]||E[0];break}case"ArrowLeft":{const t=E.indexOf(e.currentTarget)-1;n=E[t]||E[E.length-1];break}}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,p.Z)("tabs-container",m)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,p.Z)("tabs",{"tabs--block":h},k)},y.map((e=>{let{value:t,label:n,attributes:i}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:_===t?0:-1,"aria-selected":_===t,key:t,ref:e=>E.push(e),onKeyDown:x,onFocus:T,onClick:T},i,{className:(0,p.Z)("tabs__item",u,null==i?void 0:i.className,{"tabs__item--active":_===t})}),n??t)}))),i?(0,r.cloneElement)(f.filter((e=>e.props.value===_))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},f.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==_})))))}function c(e){const t=(0,i.Z)();return r.createElement(h,(0,a.Z)({key:String(t)},e))}},3110:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>l,default:()=>c,frontMatter:()=>s,metadata:()=>p,toc:()=>u});var a=n(7462),r=(n(7294),n(3905)),i=n(9877),o=n(2360);const s={sidebar_position:6},l="Counting genes I",p={unversionedId:"programming/programming_with_gene_annotations/Counting_genes_1",id:"programming/programming_with_gene_annotations/Counting_genes_1",title:"Counting genes I",description:"Some first statistics",source:"@site/docs/programming/programming_with_gene_annotations/Counting_genes_1.md",sourceDirName:"programming/programming_with_gene_annotations",slug:"/programming/programming_with_gene_annotations/Counting_genes_1",permalink:"/whg-training-resources/programming/programming_with_gene_annotations/Counting_genes_1",draft:!1,editUrl:"https://github.com/whg-training/whg-training-resources/edit/main/docs/programming/programming_with_gene_annotations/Counting_genes_1.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Investigating human genes",permalink:"/whg-training-resources/programming/programming_with_gene_annotations/exploring_gencode"},next:{title:"Memory issues and how to solve them",permalink:"/whg-training-resources/programming/programming_with_gene_annotations/Memory_issues_and_how_to_solve_them"}},m={},u=[{value:"Some first statistics",id:"some-first-statistics",level:2},{value:"How many genes are there?",id:"how-many-genes-are-there",level:3},{value:"What are all these species?",id:"what-are-all-these-species",level:3},{value:"What kinds of gene are there?",id:"what-kinds-of-gene-are-there",level:3}],h={toc:u};function c(e){let{components:t,...s}=e;return(0,r.kt)("wrapper",(0,a.Z)({},h,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"counting-genes-i"},"Counting genes I"),(0,r.kt)("h2",{id:"some-first-statistics"},"Some first statistics"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/whg-training-resources/programming/programming_with_gene_annotations/"},"Up to table of contents")),(0,r.kt)("p",null,"For simplicity, from here on in we will work with the GFF3 files from the ",(0,r.kt)("a",{parentName:"p",href:"http://ftp.ensembl.org/pub/current_gff3/"},"Ensembl ftp\nsite")," - also those from\n",(0,r.kt)("a",{parentName:"p",href:"https://plasmodb.org/plasmo/app/downloads/Current_Release/"},"PlasmoDB"),". These use the terminology ",(0,r.kt)("inlineCode",{parentName:"p"},"mRNA")," for a\ngene transcript, and they also have the genome sequence lengths written in the metadata, making life easy for\nus. Before starting, download some of these files now.  A guide to the species can be found in the ",(0,r.kt)("a",{parentName:"p",href:"https://www.ensembl.org/info/about/species.html"},"Ensembl species list"),"\nand the ",(0,r.kt)("a",{parentName:"p",href:"https://www.ensembl.org/info/about/speciestree.html"},"Ensembl species tree"),"."),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"If you want a warmup on pandas, try ",(0,r.kt)("a",{parentName:"p",href:"/whg-training-resources/programming/programming_with_gene_annotations/exploring_gencode"},"exploring the GENCODE annotations")," first. But we'll switch to using\nthe Ensembl files from now on."))),(0,r.kt)("p",null,"We will focus on protein-coding genes, and their transcripts, exons and coding sequence. They have type ",(0,r.kt)("inlineCode",{parentName:"p"},"gene"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"mRNA"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"exon"),"\nand ",(0,r.kt)("inlineCode",{parentName:"p"},"CDS")," in the files Ensembl respectively. They come in a basic hierarchy:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Each gene can have multiple transcripts (i.e. multiple expressed forms at mRNA level - e.g. they\nmight differ in how exons are spliced together, or have different transcription start or end\nsites).")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Each transcript is made up of one or more exons. The introns in between are spliced out. (This\nhappens during the transcription process.)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Of the exon sequence that makes it into a transcript, only a portion is actually translated into\nthe mature protein during processing by the ribosomes. This is the ",(0,r.kt)("em",{parentName:"p"},"coding sequence")," and the rest\nis ",(0,r.kt)("em",{parentName:"p"},"untranslated sequence"),"."))),(0,r.kt)("p",null,"The files we're looking are (roughly speaking) humanities' best guess at what this picture looks\nlike in each organism."),(0,r.kt)("p",null,"We're actually in a good shape for many of ",(0,r.kt)("a",{parentName:"p",href:"/whg-training-resources/programming/programming_with_gene_annotations/Introduction"},"our scientific questions"),". Let's start\nby counting genes:"),(0,r.kt)("h3",{id:"how-many-genes-are-there"},"How many genes are there?"),(0,r.kt)("p",null,"Let's start with counting genes - easy! One way is to use sqlite. For example using the sqlite file\nyou created in the last step:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"sqlite> SELECT COUNT(*) FROM gff_data WHERE type == `gene` ;\n")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Note.")," I ran the above command interactively in sqlite3 - you get there by typing ",(0,r.kt)("inlineCode",{parentName:"p"},"sqlite3 genes.sqlite")," in the shell.\nType ",(0,r.kt)("inlineCode",{parentName:"p"},".quit")," to quit.)"),(0,r.kt)("p",null,"If you followed the suggestions, or used my version of the code, your file will also have an ",(0,r.kt)("inlineCode",{parentName:"p"},"analysis")," column\nthat lets you differentiate the records for different species. So you can make these counts for multiple species:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"sqlite> .mode column\nsqlite> .header on\nsqlite> SELECT analysis, COUNT(*) FROM gff_data WHERE type=='gene' GROUP BY analysis ;\n")),(0,r.kt)("p",null,"In my data, which includes spiny chromis, dromedary camels, red junglefowl, humans, mice, chimpanzees, and\nmalaria parasites, this gives:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"analysis                                     COUNT(*)  \n-------------------------------------------  ----------\nAcanthochromis_polyacanthus.ASM210954v1.104  24027     \nCamelus_dromedarius.CamDro2.104.chr.gff3     18919     \nGallus_gallus.GRCg6a.104                     16666     \nHomo_sapiens.GRCh38.104                      21451     \nMus_musculus.GRCm39.104                      25655     \nPan_troglodytes.Pan_tro_3.0.104.chr          22056     \nPlasmoDB-54_Pfalciparum3D7                   5318      \n")),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"To make the above query work the ",(0,r.kt)("a",{parentName:"p",href:"https://plasmodb.org/plasmo/app/downloads/Current_Release/"},(0,r.kt)("em",{parentName:"a"},"P.falciparum")," data from\nPlasmoDB"),", I kludged it by running this sql:"),(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre"},"UPDATE genes\nSET type = 'gene', biotype = 'protein_coding_gene'\nWHERE analysis == 'PlasmoDB-54_Pfalciparum3D7'\nAND type == 'protein_coding_gene' ;\n")),(0,r.kt)("p",{parentName:"div"},"I wouldn't generally recommend this type of manually-fix-the-data-until-it-works approach\n(not least because it would have to be re-done every time we imported new data) but it'll do for this tutorial."))),(0,r.kt)("p",null,"You can also do this type of thing pretty easily in python or R. Here is the same 'group by' operation done using\npandas or dplyr:"),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"python",label:"Python code",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'import pandas, sqlite3\ndb = sqlite3.connect( "genes.sqlite" )\ngenes = pandas.read_sql( "SELECT * FROM gff_data WHERE type == \'gene\'", db )\n(\n    genes\n    .groupby( "analysis" )\n    .size()\n)\n'))),(0,r.kt)(o.Z,{value:"R",label:"R code",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'library( RSQLite )\nlibrary( dplyr )\ndb = dbConnect( dbDriver( "SQLite" ), "genes.sqlite" )\ngenes = dbGetQuery( db, "SELECT * FROM gff_data WHERE type == \'gene\'" )\n(\n    genes\n    %>% group_by( analysis )\n    %>% summarise( count = n() )\n)\n')))),(0,r.kt)("p",null,"This produces:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"analysis\nAcanthochromis_polyacanthus.ASM210954v1.104    24027\nCamelus_dromedarius.CamDro2.104.chr.gff3       18919\nGallus_gallus.GRCg6a.104                       16666\nHomo_sapiens.GRCh38.104                        21451\nMus_musculus.GRCm39.104                        25655\nPan_troglodytes.Pan_tro_3.0.104.chr            22056\nPlasmoDB-54_Pfalciparum3D7                      5318\ndtype: int64\n")),(0,r.kt)("p",null,"Interestingly, both ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/House_mouse"},"house mice")," and ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Spiny_chromis"},"spiny\nchromis")," have more (annotated) genes than humans.\nChimpanzees have a similar number, while ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Red_junglefowl"},"Red\njunglefowl")," and ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Dromedary"},"Dromedary\nCamels")," have respectively 17% and 5% fewer (annotated)\nprotein-coding genes than humans. ",(0,r.kt)("em",{parentName:"p"},"Plasmodium falciparum")," has about a quarter of the number of\ngenes. (But that's still pretty impressive because its genome size is less than a hundredth that of\nhumans.)"),(0,r.kt)("h3",{id:"what-are-all-these-species"},"What are all these species?"),(0,r.kt)("p",null,"If you're wondering that - it's time to look at ",(0,r.kt)("a",{parentName:"p",href:"http://www.onezoom.org"},"OneZoom.org")," or the ",(0,r.kt)("a",{parentName:"p",href:"https://www.ensembl.org/info/about/speciestree.html"},"Ensembl species\ntree"),". Did you know that Dolphins, like\nCamels, are ",(0,r.kt)("a",{parentName:"p",href:"http://www.onezoom.org/life/@Cetartiodactyla=622916"},"cloven-hoofed ungulates"),"?"),(0,r.kt)("h3",{id:"what-kinds-of-gene-are-there"},"What kinds of gene are there?"),(0,r.kt)("p",null,'The above counts all "genes".  But what exactly are these?'),(0,r.kt)("p",null,"One way to figure this out is by comparing to the other records in there. You can find all the top-level record\ntypes (those with no ",(0,r.kt)("inlineCode",{parentName:"p"},"Parent"),") in the file like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'import pandas, sqlite3\ndb = sqlite3.connect( "genes.sqlite" )\ntypes = pandas.read_sql(\n    "SELECT analysis, type, COUNT(*) FROM gff_data WHERE Parent IS NULL GROUP BY analysis, type",\n    db\n)\nprint( types )\n')),(0,r.kt)("p",null,"All the species have ",(0,r.kt)("inlineCode",{parentName:"p"},"pseudogenes")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"non-coding RNAs")," as well as genes."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Question:")," What are pseudogenes and non-coding RNAs anyway? Look them up on ",(0,r.kt)("a",{parentName:"p",href:"http://www.sequenceontology.org/so_wiki/index.php/Category:SO:SOFA"},"the sequence\nontology"),". Here is ",(0,r.kt)("a",{parentName:"p",href:"https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3491395/"},"an\ninteresting reference on pseudogenes")," and on\n",(0,r.kt)("a",{parentName:"p",href:"https://www.frontiersin.org/articles/10.3389/fgene.2015.00002/full"},"non-coding RNAs"),"."),(0,r.kt)("p",null,"(Some of the files also have ",(0,r.kt)("inlineCode",{parentName:"p"},"region")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"biological_region")," records - my guess is these are computational\npredictions of regions with biological function - e.g. transcript start sites from\n",(0,r.kt)("a",{parentName:"p",href:"https://www.sanger.ac.uk/tool/eponine/"},"Eponine"),".)"),(0,r.kt)("p",null,"What sets apart ",(0,r.kt)("em",{parentName:"p"},"genes")," from ",(0,r.kt)("em",{parentName:"p"},"pseudogenes")," and ",(0,r.kt)("em",{parentName:"p"},"non-coding RNAs")," is that they code for proteins.\nHowever, it's not quite that simple. If you look more closely at the records with ",(0,r.kt)("inlineCode",{parentName:"p"},"type=gene"),",\nyou'll see they actually have a second ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," field - it is called ",(0,r.kt)("inlineCode",{parentName:"p"},"biotype")," and is buried in the\nattributes. This ",(0,r.kt)("inlineCode",{parentName:"p"},"biotype")," tells us some extra information about the gene. To let us look at this\nwe need to update the code."),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Challenge")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Update your ",(0,r.kt)("inlineCode",{parentName:"p"},"gff.py")," code to make it easy to get this information out - i.e. by adding the ",(0,r.kt)("inlineCode",{parentName:"p"},"biotype")," as an extra column. (It\nwould also be useful to extract the ",(0,r.kt)("inlineCode",{parentName:"p"},"Name"),", which contains gene names.)"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Hints:")," "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"You already extracted ",(0,r.kt)("inlineCode",{parentName:"p"},"ID")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Parent")," into dedicated columns - it ought to be easy to get\nother attributes as well?")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"If making changes feels difficult in your code - I suggest you might want to ",(0,r.kt)("a",{parentName:"p",href:"/whg-training-resources/programming/programming_with_gene_annotations/Refactoring_makes_code_better"},"try a\nrefactor")," first - that is, make changes to your code to make it simpler\nwithout changing its behaviour. Since you have a good test you can make changes quite safely because the tests\nwill ensure that it still works correctly. Once the code feels nice and simple, it will be much easier to see\nhow to make changes.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Maybe you should just make ",(0,r.kt)("inlineCode",{parentName:"p"},"parse_gff3_to_dataframe()")," take a list of attributes to extract - that is, let the\nuser decide what they want?")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Extra challenge"),": Wouldn't it be good if we could remove the attributes we've put into columns (",(0,r.kt)("inlineCode",{parentName:"p"},"ID"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Parent"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Name")," and\n",(0,r.kt)("inlineCode",{parentName:"p"},"biotype")," say) from the ",(0,r.kt)("inlineCode",{parentName:"p"},"attributes")," column as well? (Note: this will change the behaviour slightly - remember to add a test\nfor this new functionality.)\\")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Extra super-difficult challenge"),": Do this without using ridiculous amounts of memory."))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"More hints:")," My solutions are in\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/whg-training/whg-training-resources/blob/main/docs/programming/programming_with_gene_annotations/solutions/part2"},"this folder"),"\nif you want to take a look. The first version, ",(0,r.kt)("a",{target:"_blank",href:n(4306).Z},"gff_highmem.py"),", extracts any attribute and looks relatively simple.\nBut it turns out to ",(0,r.kt)("a",{parentName:"p",href:"/whg-training-resources/programming/programming_with_gene_annotations/Memory_issues_and_how_to_solve_them"},"use up huge amounts of memory"),". The second version uses a ",(0,r.kt)("em",{parentName:"p"},"chunking")," strategy to remove\nthe attributes, and this helps control the memory.  On my laptop the various versions behave a bit differently:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Version"),(0,r.kt)("th",{parentName:"tr",align:null},"time taken to load GENCODE data"),(0,r.kt)("th",{parentName:"tr",align:null},"Max memory usage"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Original"),(0,r.kt)("td",{parentName:"tr",align:null},"About 18 seconds"),(0,r.kt)("td",{parentName:"tr",align:null},"About 2.4Gb")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"First version above"),(0,r.kt)("td",{parentName:"tr",align:null},"About 28 seconds"),(0,r.kt)("td",{parentName:"tr",align:null},"About 3.8Gb")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Version using chunking"),(0,r.kt)("td",{parentName:"tr",align:null},"Also about 29 seconds"),(0,r.kt)("td",{parentName:"tr",align:null},"About 2.6Gb")))),(0,r.kt)("p",null,"Now let's talk more about ",(0,r.kt)("a",{parentName:"p",href:"/whg-training-resources/programming/programming_with_gene_annotations/Counting_genes_2"},"Investigating protein-coding genes"),"."))}c.isMDXComponent=!0},4306:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/files/gff_highmem-2cc1e84ea4d7ec0c0528f7709f164f5f.py"}}]);