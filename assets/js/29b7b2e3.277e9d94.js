"use strict";(self.webpackChunkwhg_training_resources=self.webpackChunkwhg_training_resources||[]).push([[2069],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>m});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=p(a),m=r,c=u["".concat(l,".").concat(m)]||u[m]||h[m]||i;return a?n.createElement(c,o(o({ref:t},d),{},{components:a})):n.createElement(c,o({ref:t},d))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},2360:(e,t,a)=>{a.d(t,{Z:()=>o});var n=a(7294),r=a(6010);const i="tabItem_OmH5";function o(e){let{children:t,hidden:a,className:o}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(i,o),hidden:a},t)}},9877:(e,t,a)=>{a.d(t,{Z:()=>m});var n=a(7462),r=a(7294),i=a(2389),o=a(7392),s=a(7094),l=a(2466),p=a(6010);const d="tabList_uSqn",h="tabItem_LplD";function u(e){var t,a;const{lazy:i,block:u,defaultValue:m,values:c,groupId:g,className:f}=e,k=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),w=c??k.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),y=(0,o.l)(w,((e,t)=>e.value===t.value));if(y.length>0)throw new Error(`Docusaurus error: Duplicate values "${y.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const N=null===m?m:m??(null==(t=k.find((e=>e.props.default)))?void 0:t.props.value)??(null==(a=k[0])?void 0:a.props.value);if(null!==N&&!w.some((e=>e.value===N)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${N}" but none of its children has the corresponding value. Available values are: ${w.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:v,setTabGroupChoices:b}=(0,s.U)(),[_,C]=(0,r.useState)(N),x=[],{blockElementScrollPositionUntilNextRender:I}=(0,l.o5)();if(null!=g){const e=v[g];null!=e&&e!==_&&w.some((t=>t.value===e))&&C(e)}const T=e=>{const t=e.currentTarget,a=x.indexOf(t),n=w[a].value;n!==_&&(I(t),C(n),null!=g&&b(g,n))},D=e=>{var t;let a=null;switch(e.key){case"ArrowRight":{const t=x.indexOf(e.currentTarget)+1;a=x[t]||x[0];break}case"ArrowLeft":{const t=x.indexOf(e.currentTarget)-1;a=x[t]||x[x.length-1];break}}null==(t=a)||t.focus()};return r.createElement("div",{className:(0,p.Z)("tabs-container",d)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,p.Z)("tabs",{"tabs--block":u},f)},w.map((e=>{let{value:t,label:a,attributes:i}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:_===t?0:-1,"aria-selected":_===t,key:t,ref:e=>x.push(e),onKeyDown:D,onFocus:T,onClick:T},i,{className:(0,p.Z)("tabs__item",h,null==i?void 0:i.className,{"tabs__item--active":_===t})}),a??t)}))),i?(0,r.cloneElement)(k.filter((e=>e.props.value===_))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},k.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==_})))))}function m(e){const t=(0,i.Z)();return r.createElement(u,(0,n.Z)({key:String(t)},e))}},1415:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));a(9877),a(2360);const i={sidebar_position:3},o="Processing GFF files",s={unversionedId:"programming/programming_with_gene_annotations/Getting_started_writing_some_code",id:"programming/programming_with_gene_annotations/Getting_started_writing_some_code",title:"Processing GFF files",description:"Up to table of contents / Back to the previous page / Go to the next page",source:"@site/docs/programming/programming_with_gene_annotations/Getting_started_writing_some_code.md",sourceDirName:"programming/programming_with_gene_annotations",slug:"/programming/programming_with_gene_annotations/Getting_started_writing_some_code",permalink:"/whg-training-resources/programming/programming_with_gene_annotations/Getting_started_writing_some_code",draft:!1,editUrl:"https://github.com/whg-training/whg-training-resources/edit/main/docs/programming/programming_with_gene_annotations/Getting_started_writing_some_code.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"What gene annotation data looks like",permalink:"/whg-training-resources/programming/programming_with_gene_annotations/What_gene_annotation_data_looks_like"},next:{title:"Making a module",permalink:"/whg-training-resources/programming/programming_with_gene_annotations/making_a_module"}},l={},p=[{value:"Diving straight in - parsing data",id:"diving-straight-in---parsing-data",level:2},{value:"Test-driven development",id:"test-driven-development",level:2},{value:"Anatomy of getting it to work",id:"anatomy-of-getting-it-to-work",level:2},{value:"A first go",id:"a-first-go",level:3},{value:"Skipping metadata",id:"skipping-metadata",level:3},{value:"Adding column names",id:"adding-column-names",level:3},{value:"Dealing with missing values",id:"dealing-with-missing-values",level:3},{value:"Specifying the right column types",id:"specifying-the-right-column-types",level:3},{value:"Extracting attributes",id:"extracting-attributes",level:3},{value:"Testing it out",id:"testing-it-out",level:3},{value:"Next steps",id:"next-steps",level:2}],d={toc:p};function h(e){let{components:t,...i}=e;return(0,r.kt)("wrapper",(0,n.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"processing-gff-files"},"Processing GFF files"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/whg-training-resources/programming/programming_with_gene_annotations/"},"Up to table of contents")," / ",(0,r.kt)("a",{parentName:"p",href:"/whg-training-resources/programming/programming_with_gene_annotations/What_gene_annotation_data_looks_like"},"Back to the previous page")," / ",(0,r.kt)("a",{parentName:"p",href:"/whg-training-resources/programming/programming_with_gene_annotations/Converting_gff_to_sqlite"},"Go to the next page")),(0,r.kt)("p",null,"Your task, if you choose to accept it, is to write some code that processes a GFF file, makes sense of the\ndata, and uses it to gather some interesting statistics. And then to apply it to analyse genes from multiple\nspecies. By doing this we can hopefully learn something about the genome biology of the world's organisms."),(0,r.kt)("p",null,"The aim of this tutorial is that ",(0,r.kt)("strong",{parentName:"p"},"you")," to write the code that does this (either on your own or working in a\ngroup if you prefer). The tutorial will guide you through one way to do it, and if you run this as part of a\n",(0,r.kt)("a",{parentName:"p",href:"www.well.ox.ac.uk"},"WHG")," course, there will be lots of support."),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Remember we're not writing this code for it's own sake but to answer our questions like the ones in our introduction:"),(0,r.kt)("ul",{parentName:"div"},(0,r.kt)("li",{parentName:"ul"},"How many genes are there?"),(0,r.kt)("li",{parentName:"ul"},"How big are they?"),(0,r.kt)("li",{parentName:"ul"},"How much of the genome is in genes?"),(0,r.kt)("li",{parentName:"ul"},"How complex are genes - How many exons?  How many different transcripts?"),(0,r.kt)("li",{parentName:"ul"},"How much of genes is actually protein-coding sequence - and how much is untranslated?"),(0,r.kt)("li",{parentName:"ul"},"How much do these patterns differ across species?")))),(0,r.kt)("p",null,"How to start writing this code?  Well there are a few ways:"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Do it yourself.")," It may well be that you already have a good idea how to go about this. If so, feel free to\ndive straight in. You're free to use any language or system you like for this - standard options might be\n",(0,r.kt)("a",{parentName:"p",href:"https://www.python.org"},"python")," or ",(0,r.kt)("a",{parentName:"p",href:"https://cran.r-project.org"},"R"),", but you could also use\n",(0,r.kt)("a",{parentName:"p",href:"https://julialang.org"},"julia"),", or even ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/C%2B%2B"},"C++")," or another compiled\nlanguage. Make sure you ",(0,r.kt)("a",{parentName:"p",href:"/whg-training-resources/prerequisites/"},"have these installed first"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Use a package.")," If you search, you will be able to find packages for your favourite programming language that\nparse GFF3 for you - or perhaps a library that processes gene annotations at a higher level. Now, using that\nwould to some extent defeat the purpose of the exercise of this tutorial (which is about coding), but on the\nother hand what we're really interested in is genes rather than the coding itself. So if you want to take that\nroute and it gets you to better answers quicker, go ahead!"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Write everything from scratch.")," It's also quite possible to do this task in (say) base python or R without\nusing any existing libraries."),(0,r.kt)("p",null,"This tutorial will take a 'middle' way. We will use python but will use the popular ",(0,r.kt)("a",{parentName:"p",href:"https://pandas.pydata.org"},(0,r.kt)("inlineCode",{parentName:"a"},"pandas")," dataframe\nlibrary")," library to begin reading and manipulating the data. ",(0,r.kt)("inlineCode",{parentName:"p"},"pandas")," is a natural\nfit here because the GFF3 data is in tabulate format (it's many rows x nine named columns) and so it ought to\nfit well in a dataframe."),(0,r.kt)("p",null,"In the course of the tutorial we'll develop a little python module to help us answer the questions."),(0,r.kt)("h2",{id:"diving-straight-in---parsing-data"},"Diving straight in - parsing data"),(0,r.kt)("p",null,"If you ",(0,r.kt)("a",{parentName:"p",href:"/whg-training-resources/programming/programming_with_gene_annotations/What_gene_annotation_data_looks_like"},"looked at the gene annotation data"),", you'll know\nthat it comes in rows of data that are tab-delimited. That's good and will be a good fit to a\ndataframe structure. But the data is also relational (meaning that the records refer to each other,\nvia the ",(0,r.kt)("inlineCode",{parentName:"p"},"Parent")," attribute). And since this has several levels (e.g. exons are associated with\ntranscripts, which are in turn associated with genes), we might ultimately have to build some form\nof hierarchical data structure to capture this."),(0,r.kt)("p",null,"That sounds complex, so let's break off a manageable first bit of the job by just focussing on\ngetting the data in. We'll start by trying to write a function that loads the data. We'll call this\nfunction ",(0,r.kt)("inlineCode",{parentName:"p"},"parse_gff3_to_dataframe()")," because that's what it will do. It will look like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def parse_gff3_to_dataframe( file ):\n    result = (some code to load the data from the file here)\n    return result\n")),(0,r.kt)("p",null,"and can be run like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'file = open( "gencode.v41.annotation.head.gff" )\nX = parse_gff3_to_dataframe( file )\n')),(0,r.kt)("p",null,"...producing a dataframe with columns ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"parent"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"seqid"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"source"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"type"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"start"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"end"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"score"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"strand"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"phase"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"attributes"),"."),(0,r.kt)("p",null,"Simple! If only we knew what bit of code to write in the function there."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Challenge.")," Can you write ",(0,r.kt)("inlineCode",{parentName:"p"},"parse_gff3_to_dataframe()"),"?"),(0,r.kt)("p",null,"To make your function really good it should: ",(0,r.kt)("strong",{parentName:"p"},"deal with column names"),", ",(0,r.kt)("strong",{parentName:"p"},"handle missing data values"),", and\n",(0,r.kt)("strong",{parentName:"p"},"get the data types of columns right"),". And, because we want to capture the relational structure, let's also\nmake it extract out the ",(0,r.kt)("inlineCode",{parentName:"p"},"ID")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Parent")," attributes as new columns. Good luck!"),(0,r.kt)("p",null,"If you don't know where to start - don't worry, we will walk through a process of writing this below."),(0,r.kt)("h2",{id:"test-driven-development"},"Test-driven development"),(0,r.kt)("p",null,"Funnily enough our function above already has a useful property, even though we haven't yet written it: it is ",(0,r.kt)("em",{parentName:"p"},"already testable"),".  To see this let's first generate some test data:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'test_data = """##gff-version 3\n#description: test data\nchr1\\tme\\tgene\\t1\\t1000\\t.\\t+\\t.\\tID=gene1;other_data=stuff\nchr1\\tme\\texon\\t10\\t900\\t.\\t+\\t.\\tID=gene1.1;Parent=gene1\n"""\n')),(0,r.kt)("p",null,"And then write a test:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def test_parse_gff3_to_dataframe( data ):\n    from io import StringIO # see comment below\n    \n    # 1. run our function to parse the data:\n    data = parse_gff3_to_dataframe( StringIO( data ))\n    \n    # 2. test it:\n    # check some string fields:\n    assert data['seqid'][0] == 'chr1'\n    assert data['strand'][0] == '+'\n    assert data['attributes'][0] == 'ID=gene1;other_data=stuff'\n    assert data['seqid'][1] == 'chr1'\n    assert data['strand'][1] == '+'\n    assert data['attributes'][1] == 'ID=gene1.1;Parent=gene1'\n    \n    # check that start and end are integers\n    assert data['start'][0] == 1 # start and end are integers, not strings\n    assert data['end'][0] == 1000\n    assert data['start'][1] == 10\n    assert data['end'][1] == 900\n    \n    # check that missing data is handled right\n    # \".\" indicates missing data in the GFF spec\n    # but we should have translated that to `NaN`, which\n    # is pandas' way of indicating missing data.\n    from math import isnan\n    assert isnan( data['score'][1] ) \n    \n    # check that we extracted `ID` and `Parent` right.\n    assert data['ID'][0] == 'gene1'\n    assert data['ID'][1] == 'gene1.1'\n    assert data['Parent'][1] == 'gene1'\n    # etc.\n\ntest_parse_gff3_to_dataframe( test_data )\n")),(0,r.kt)("p",null,"This prints something like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Traceback (most recent call last):\n  File "<stdin>", line 1, in <module>\n  File "<stdin>", line 5, in test_parse_gff3_to_dataframe\nNameError: name \'parse_gff3_to_dataframe\' is not defined\n')),(0,r.kt)("p",null,"Of course it's not defined, we haven't written it yet!"),(0,r.kt)("p",null,"But we now have a concrete target to shoot for: when our code passes the test it will be doing the right thing."),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Hardly anyone ever actually writes code this way (writing the test first) but they really should, because"),(0,r.kt)("ol",{parentName:"div"},(0,r.kt)("li",{parentName:"ol"},"it makes you figure out how your code will be used beforehand"),(0,r.kt)("li",{parentName:"ol"},"it makes you make testable code - which means typically means pieces that are small and easy to use"),(0,r.kt)("li",{parentName:"ol"},"when you've written the code - hey presto, you've also written the tests (no extra work).")),(0,r.kt)("p",{parentName:"div"},"For these reasons I thought we'd get the test in up-front here."))),(0,r.kt)("p",null,"When your function passes the test, you're done! Go ahead and ",(0,r.kt)("a",{parentName:"p",href:"/whg-training-resources/programming/programming_with_gene_annotations/making_a_module"},"turn it into a module"),"."),(0,r.kt)("h2",{id:"anatomy-of-getting-it-to-work"},"Anatomy of getting it to work"),(0,r.kt)("p",null,"To figure out what to write it's useful to try a few things. Start an interactive python session now - a\n",(0,r.kt)("a",{parentName:"p",href:"/whg-training-resources/prerequisites/Jupyterlab"},"jupyter notebook")," or ",(0,r.kt)("a",{parentName:"p",href:"/whg-training-resources/prerequisites/python"},"ipython")," would be good options.\nAlso make sure you have ",(0,r.kt)("a",{parentName:"p",href:"/whg-training-resources/prerequisites/pandas"},"installed the pandas library")," because that's what we'll use."),(0,r.kt)("h3",{id:"a-first-go"},"A first go"),(0,r.kt)("p",null,"The data is basically tabular, so let's try to load the data using pandas' function designed for\nreading tabular data:\n",(0,r.kt)("a",{parentName:"p",href:"https://www.google.com/search?client=safari&rls=en&q=panda+read_table&ie=UTF-8&oe=UTF-8"},(0,r.kt)("inlineCode",{parentName:"a"},"read_table")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import pandas\nfilename = "gencode.v41.annotation.head.gff"\nX = pandas.read_table(\n  "gencode.v41.annotation.head.gff"\n)\n')),(0,r.kt)("p",null,"Try running this now - what happens?"),(0,r.kt)("p",null,"You will probably find you have an error. Mine prints out a bunch of stuff and then says, right\nnear the end:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"ParserError : Error tokenizing data. C error: Expected 1 fields in line 8, saw 9\n")),(0,r.kt)("p",null,"If you're not used to this kind of thing, errors like this may seem pretty cryptic. But they are\noften more helpful than they look at first. This one tells us for example that a problem occurred\non line 8 of the input file. It expected to see 1 field there but found 9. ",(0,r.kt)("a",{parentName:"p",href:"/whg-training-resources/programming/programming_with_gene_annotations/What_gene_annotation_data_looks_like"},"Look back at the input\ndata"),". Is there something different about line 8 than\nearlier lines?  (Hint: yes there is!)."),(0,r.kt)("h3",{id:"skipping-metadata"},"Skipping metadata"),(0,r.kt)("p",null,"We haven't told the parser about the metadata lines - so it is unsurprisingly confused. WE would\nlike ",(0,r.kt)("inlineCode",{parentName:"p"},"read_table()")," to just ignore those lines. There are a few ways to do this, but the easiest is\nto tell ",(0,r.kt)("inlineCode",{parentName:"p"},"read_table")," that these lines are ",(0,r.kt)("strong",{parentName:"p"},"comments")," - that is, bits of text that aren't part of\nthe data.  If you read the\n",(0,r.kt)("a",{parentName:"p",href:"https://www.google.com/search?client=safari&rls=en&q=panda+read_table"},(0,r.kt)("inlineCode",{parentName:"a"},"read_table()")," documentation"),"\nyou may spot this argument - called ",(0,r.kt)("inlineCode",{parentName:"p"},"comment"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"X = pandas.read_table(\n  \"gencode.v41.annotation.head.gff\",\n  comment = '#'\n)\n")),(0,r.kt)("p",null,"Try this again.  Does it work?  (Try just ",(0,r.kt)("inlineCode",{parentName:"p"},"X")," to print out the result.)"),(0,r.kt)("p",null,"It sort of works - but not quite. This begins our long war of attrition to get this in shape."),(0,r.kt)("h3",{id:"adding-column-names"},"Adding column names"),(0,r.kt)("p",null,"At the moment",(0,r.kt)("inlineCode",{parentName:"p"},"X")," doesn't have the right column names. In fact, how could it? The ",(0,r.kt)("a",{parentName:"p",href:"/whg-training-resources/programming/programming_with_gene_annotations/What_gene_annotation_data_looks_like"},"file didn't have them\nin"),". We can fix that by adding a ",(0,r.kt)("inlineCode",{parentName:"p"},"names")," argument. What\nnames? Well, the ones from ",(0,r.kt)("a",{parentName:"p",href:"https://m.ensembl.org/info/website/upload/gff3.html"},"the GFF spec")," of course:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"X = pandas.read_table(\n  \"gencode.v41.annotation.head.gff\",\n  comment = '#',\n  names = [ 'seqid', 'source', 'type', 'start', 'end', 'score', 'strand', 'phase', 'attributes' ]\n)\n")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"img",src:a(966).Z,width:"2002",height:"780"})),(0,r.kt)("p",null,"Now it has column names!  "),(0,r.kt)("h3",{id:"dealing-with-missing-values"},"Dealing with missing values"),(0,r.kt)("p",null,"Now onto more subtle issues. The ",(0,r.kt)("a",{parentName:"p",href:"https://m.ensembl.org/info/website/upload/gff3.html"},"spec")," says\nthat '.' indicates a missing value - but our python code thinks they are simply strings.  Look:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"[ 'this_is_a_%s_character' % s for s in X[\"score\"] ]\n")),(0,r.kt)("p",null,"If you read the ",(0,r.kt)("a",{parentName:"p",href:"https://www.google.com/search?client=safari&rls=en&q=panda+read_table"},(0,r.kt)("inlineCode",{parentName:"a"},"read_table()")," docs")," you'll see\nthis is easy as well - we need the ",(0,r.kt)("inlineCode",{parentName:"p"},"na_values")," argument:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"X = pandas.read_table(\n  \"gencode.v41.annotation.head.gff\",\n  comment = '#',\n  names = [ 'seqid', 'source', 'type', 'start', 'end', 'score', 'strand', 'phase', 'attributes' ],\n  na_values = '.'\n)\n")),(0,r.kt)("p",null,"Now the missing values come up as ",(0,r.kt)("inlineCode",{parentName:"p"},"NaN")," (which is\n",(0,r.kt)("a",{parentName:"p",href:"https://pandas.pydata.org/docs/user_guide/missing_data.html"},"what pandas uses for a missing value"),".\n)"),(0,r.kt)("h3",{id:"specifying-the-right-column-types"},"Specifying the right column types"),(0,r.kt)("p",null,"But now we run into a more subtle issue: it hasn't quite got the column types right. To see this,\ntry showing them:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"X.dtypes\n")),(0,r.kt)("p",null,"which prints"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"seqid          object\nsource         object\ntype           object\nstart           int64\nend             int64\nscore         float64\nstrand         object\nphase         float64\nattributes     object\ndtype: object\n")),(0,r.kt)("p",null,"Most of this is actually fine (",(0,r.kt)("inlineCode",{parentName:"p"},"object")," is referring to a python object, which in this case means a\nstring, and it has correctly realised that ",(0,r.kt)("inlineCode",{parentName:"p"},"start")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"end")," are integers. It has got ",(0,r.kt)("inlineCode",{parentName:"p"},"phase"),"\nwrong - it thinks it is a floating-poing value, when it\n",(0,r.kt)("a",{parentName:"p",href:"https://m.ensembl.org/info/website/upload/gff3.html"},"really isn't"),"."),(0,r.kt)("p",null,"However ther real problem here is that we're letting it guess the types from the input data, which\nhas the horrible property that it might give different types (leading to broken code) depending on\nwhat data is passed in.\n",(0,r.kt)("a",{parentName:"p",href:"https://m.ensembl.org/info/website/upload/gff3.html"},"We know what the types are"),": let's\nspecify them instead using the ",(0,r.kt)("inlineCode",{parentName:"p"},"dtype")," argument:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"X = pandas.read_table(\n    \"gencode.v41.annotation.head.gff\",\n    comment = '#',\n    names = [ 'seqid', 'source', 'type', 'start', 'end', 'score', 'strand', 'phase', 'attributes' ],\n    na_values = '.',\n    dtype = {\n        'seqid': 'string',\n        'source': 'string',\n        'type': 'string',\n        'start': 'Int64',\n        'end': 'Int64',\n        'score': 'float',\n        'strand': 'string',\n        'phase': 'string',\n        'attributes': 'string'\n    }\n)\n")),(0,r.kt)("h3",{id:"extracting-attributes"},"Extracting attributes"),(0,r.kt)("p",null,"It turns out pandas makes this easy too - it has a specific function for this\ntype of thing: ",(0,r.kt)("a",{parentName:"p",href:"https://pandas.pydata.org/docs/reference/api/pandas.Series.str.extract.html"},(0,r.kt)("inlineCode",{parentName:"a"},".str.extract()")),". "),(0,r.kt)("p",null,"It works like this: we define a ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Regular_expression"},"regular expression")," that\ncaptures the bit of the attributes we want to extract.  Then we pass that to the ",(0,r.kt)("inlineCode",{parentName:"p"},".str.extract()")," function."),(0,r.kt)("p",null,"For example, to capture a field of the form ",(0,r.kt)("inlineCode",{parentName:"p"},"ID=something;"),", we could use the basic regular expression:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"ID=([^;]+)\n")),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"If you haven't used regular expressions before this might look pretty opaque. It gives a specification for how\nto parse some text in a particular way, and is understood as follows:"),(0,r.kt)("ul",{parentName:"div"},(0,r.kt)("li",{parentName:"ul"},"The 'ID=' part looks for the exact string \"ID=\";"),(0,r.kt)("li",{parentName:"ul"},"The '",(0,r.kt)("sup",{parentName:"li",id:"fnref-;"},(0,r.kt)("a",{parentName:"sup",href:"#fn-;",className:"footnote-ref"},";")),"+' part looks for a sequence of one or more characters (",(0,r.kt)("inlineCode",{parentName:"li"},"+"),") that are not semicolons (",(0,r.kt)("inlineCode",{parentName:"li"},"[^;]"),")."),(0,r.kt)("li",{parentName:"ul"},"The parentheses ",(0,r.kt)("inlineCode",{parentName:"li"},"(")," and ",(0,r.kt)("inlineCode",{parentName:"li"},")")," tell the regexp to ",(0,r.kt)("em",{parentName:"li"},"capture")," (i.e. remember) whatever matched.")),(0,r.kt)("p",{parentName:"div"},'So put together this says "find something of the form ',(0,r.kt)("inlineCode",{parentName:"p"},"ID=value"),', up to but not including any semicolon, and\nremember the value."'))),(0,r.kt)("p",null,"Let's test this out by making some dummy data with the ",(0,r.kt)("inlineCode",{parentName:"p"},"ID")," in different places in the string:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'test_attributes = pandas.Series( [\n    "a=b;ID=gene_1",\n    "ID=gene_2;a=b",\n    "ID=gene_3",\n    "a=b"\n] )\n')),(0,r.kt)("p",null,"Let's try to extract the ",(0,r.kt)("inlineCode",{parentName:"p"},"ID")," from that test data:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"test_attributes.str.extract( 'ID=([^;]+)' )\n")),(0,r.kt)("p",null,"This will print something like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"        0\n0  gene_1\n1  gene_2\n2  gene_3\n3     NaN\n")),(0,r.kt)("p",null,"This looks good - for example it's correctly realised there's no ID in the last row."),(0,r.kt)("p",null,"Getting our ",(0,r.kt)("inlineCode",{parentName:"p"},"ID")," field out of the attributes is therefore as easy as writing"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"X['ID'] = X.attributes.str.extract( 'ID=([^;]+)' )\n")),(0,r.kt)("p",null,"and similarly for the ",(0,r.kt)("inlineCode",{parentName:"p"},"Parent")," attribute."),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Thanks to Jonathan Chan for pointing out this neat way to extract attributes."))),(0,r.kt)("h3",{id:"testing-it-out"},"Testing it out"),(0,r.kt)("p",null,"Now things are looking pretty good - right?  Let's put it in our function:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def parse_gff3_to_dataframe( file ):\n    result = pandas.read_table(\n        file,\n        comment = '#',\n        names = [ 'seqid', 'source', 'type', 'start', 'end', 'score', 'strand', 'phase', 'attributes' ],\n        na_values = '.',\n        dtype = {\n            'seqid': str,\n            'source': str,\n            'type': str,\n            'start': int,\n            'end': int,\n            'score': float,\n            'strand': str,\n            'phase': str,\n            'attributes': str\n        }\n    )\n    X['ID'] = result.attributes.str.extract( 'ID=([^;]+)' )\n    X['Parent'] = result.attributes.str.extract( 'Parent=([^;]+)' )\n    # reorder to put ID and Parent at the front\n    result = result[ [ 'ID', 'Parent', 'seqid', 'source', 'type', 'start', 'end', 'score', 'strand', 'phase', 'attributes' ]]\n    return result\n")),(0,r.kt)("p",null,"...and test it out:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"test_parse_gff3_to_dataframe( test_data )\n")),(0,r.kt)("p",null,"Does it work?  ",(0,r.kt)("strong",{parentName:"p"},"Congratulations!")),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"If it still doesn't work - you have a bug. To fix it, ",(0,r.kt)("strong",{parentName:"p"},"first")," check you have the indentation correct. Python\nexpects everything to be indented the same - either tab characters, which I have used above, or spaces. If you\nhave a mix that will very likely confuse it."),(0,r.kt)("p",{parentName:"div"},(0,r.kt)("strong",{parentName:"p"},"Second"),", look carefully at the error message. Often the last part is the most important bit and points\nstraight at the line of your code that caused the error, but sometimes you have to scroll up a few lines to find\nthe bit that's referring to your code."),(0,r.kt)("p",{parentName:"div"},"For example - a moment ago I had this error:"),(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre"},'File ~/Projects/Software/3rd_party/miniconda3/lib/python3.9/site-packages/pandas/core/indexes/base.py:6171, in Index._raise_if_missing(self, key, indexer, axis_name)\n   6168     raise KeyError(f"None of [{key}] are in the [{axis_name}]")\n   6170 not_found = list(ensure_index(key)[missing_mask.nonzero()[0]].unique())\n-> 6171 raise KeyError(f"{not_found} not in index")\n\nKeyError: "[\'ID\', \'Parent\'] not in index"  \n')),(0,r.kt)("p",{parentName:"div"},"The error is that python can't find the ",(0,r.kt)("inlineCode",{parentName:"p"},"ID")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Parent"),' columns in the "index" (which is pandas\' way of\ncalling the column names). The error is weird though because that is in python code (on line 6171 of ',(0,r.kt)("inlineCode",{parentName:"p"},"base.py"),",\nit says). There's no way base python is causing this error! However, scrolling up a bit I see this:"),(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre"},"Cell In [33], line 22, in parse_gff3_to_dataframe(file)\n     20 X['Parent'] = X.attributes.str.extract( 'Parent=([^;]+)' )\n     21 # reorder to put ID and Parent at the front\n---\x3e 22 result = result[ [ 'ID', 'Parent', 'seqid', 'source', 'type', 'start', 'end', 'score', 'strand', 'phase', 'attributes' ]]\n     23 return result\n")),(0,r.kt)("p",{parentName:"div"},"so it is failing in my code when it tries to reorder columns."),(0,r.kt)("p",{parentName:"div"},"Staring hard at this code I see the problem, which is actually just before this on lines 19 and 20: I forgot to\nchange the code to use ",(0,r.kt)("inlineCode",{parentName:"p"},"result")," instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"X"),". Thus ",(0,r.kt)("inlineCode",{parentName:"p"},"result")," never gets an ",(0,r.kt)("inlineCode",{parentName:"p"},"ID")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"Parent")," column, so the\nre-ordering fails."))),(0,r.kt)("p",null,"My solution is\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/whg-training/whg-training-resources/blob/main/docs/programming/programming_with_gene_annotations/solutions/part1/gff.py"},"here"),"\n(or ",(0,r.kt)("a",{target:"_blank",href:a(2343).Z},"download directly"),") if you want to take a look."),(0,r.kt)("h2",{id:"next-steps"},"Next steps"),(0,r.kt)("p",null,"Once you've got your code working - go ahead and ",(0,r.kt)("a",{parentName:"p",href:"/whg-training-resources/programming/programming_with_gene_annotations/making_a_module"},"turn it into a module"),"."))}h.isMDXComponent=!0},2343:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/files/gff-9fcbfd66dbcb2332cf0504d125cd9991.py"},966:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/genes_df_1-d0c06b7d34ef9045fb33bafc6b355c3c.png"}}]);